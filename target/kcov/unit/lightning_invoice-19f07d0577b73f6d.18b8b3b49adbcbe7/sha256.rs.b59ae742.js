var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin Hashes Library"},
{"lineNum":"    2","line":"// Written in 2018 by"},
{"lineNum":"    3","line":"//   Andrew Poelstra <apoelstra@wpsoftware.net>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    6","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    7","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    8","line":"// any warranty."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   11","line":"// along with this software."},
{"lineNum":"   12","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"//! # SHA256"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"use HashEngine as EngineTrait;"},
{"lineNum":"   20","line":"use Hash as HashTrait;"},
{"lineNum":"   21","line":"use Error;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"const BLOCK_SIZE: usize = 64;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// Engine to compute SHA256 hash function"},
{"lineNum":"   26","line":"pub struct HashEngine {"},
{"lineNum":"   27","line":"    buffer: [u8; BLOCK_SIZE],"},
{"lineNum":"   28","line":"    h: [u32; 8],"},
{"lineNum":"   29","line":"    length: usize,"},
{"lineNum":"   30","line":"}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"write_impl!(HashEngine);"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"impl Clone for HashEngine {"},
{"lineNum":"   35","line":"    fn clone(&self) -> HashEngine {"},
{"lineNum":"   36","line":"        HashEngine {"},
{"lineNum":"   37","line":"            h: self.h,"},
{"lineNum":"   38","line":"            length: self.length,"},
{"lineNum":"   39","line":"            buffer: self.buffer,"},
{"lineNum":"   40","line":"        }"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"impl EngineTrait for HashEngine {"},
{"lineNum":"   45","line":"    type MidState = [u8; 32];"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    #[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"   48","line":"    fn midstate(&self) -> [u8; 32] {","class":"lineCov","hits":"1","order":"3573","possible_hits":"1",},
{"lineNum":"   49","line":"        let mut ret = [0; 32];","class":"lineCov","hits":"1","order":"3574","possible_hits":"1",},
{"lineNum":"   50","line":"        BigEndian::write_u32_into(&self.h, &mut ret);","class":"lineCov","hits":"1","order":"3575","possible_hits":"1",},
{"lineNum":"   51","line":"        ret","class":"lineCov","hits":"1","order":"3638","possible_hits":"1",},
{"lineNum":"   52","line":"    }","class":"linePartCov","hits":"1","order":"3639","possible_hits":"2",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    #[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"   55","line":"    fn midstate(&self) -> [u8; 32] {"},
{"lineNum":"   56","line":"        let mut ret = [0; 32];"},
{"lineNum":"   57","line":"        ret.copy_from_slice(&self.buffer[..32]);"},
{"lineNum":"   58","line":"        ret"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    const BLOCK_SIZE: usize = 64;"},
{"lineNum":"   62","line":"}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"/// Output of the SHA256 hash function"},
{"lineNum":"   65","line":"#[derive(Copy, Clone, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]","class":"linePartCov","hits":"4","order":"2861","possible_hits":"5",},
{"lineNum":"   66","line":"pub struct Hash([u8; 32]);","class":"lineCov","hits":"1","order":"2862","possible_hits":"1",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"hex_fmt_impl!(Debug, Hash);"},
{"lineNum":"   69","line":"hex_fmt_impl!(Display, Hash);"},
{"lineNum":"   70","line":"hex_fmt_impl!(LowerHex, Hash);"},
{"lineNum":"   71","line":"index_impl!(Hash);"},
{"lineNum":"   72","line":"serde_impl!(Hash, 32);"},
{"lineNum":"   73","line":"borrow_slice_impl!(Hash);"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"impl HashTrait for Hash {"},
{"lineNum":"   76","line":"    type Engine = HashEngine;"},
{"lineNum":"   77","line":"    type Inner = [u8; 32];"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    fn engine() -> HashEngine {","class":"lineCov","hits":"1","order":"3408","possible_hits":"1",},
{"lineNum":"   80","line":"        HashEngine {","class":"lineCov","hits":"1","order":"3411","possible_hits":"1",},
{"lineNum":"   81","line":"            h: [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19],","class":"lineCov","hits":"1","order":"3409","possible_hits":"1",},
{"lineNum":"   82","line":"            length: 0,"},
{"lineNum":"   83","line":"            buffer: [0; BLOCK_SIZE],","class":"lineCov","hits":"1","order":"3410","possible_hits":"1",},
{"lineNum":"   84","line":"        }"},
{"lineNum":"   85","line":"    }","class":"linePartCov","hits":"1","order":"3412","possible_hits":"2",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    #[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"   88","line":"    fn from_engine(mut e: HashEngine) -> Hash {","class":"lineCov","hits":"1","order":"3551","possible_hits":"1",},
{"lineNum":"   89","line":"        use std::io::Write;"},
{"lineNum":"   90","line":"        use byteorder::WriteBytesExt;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        // pad buffer with a single 1-bit then all 0s, until there are exactly 8 bytes remaining"},
{"lineNum":"   93","line":"        let data_len = e.length as u64;","class":"lineCov","hits":"1","order":"3552","possible_hits":"1",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        let zeroes = [0; BLOCK_SIZE - 8];","class":"lineCov","hits":"1","order":"3553","possible_hits":"1",},
{"lineNum":"   96","line":"        e.write_all(&[0x80]).unwrap();","class":"lineCov","hits":"1","order":"3554","possible_hits":"1",},
{"lineNum":"   97","line":"        if e.length % BLOCK_SIZE > zeroes.len() {","class":"linePartCov","hits":"1","order":"3555","possible_hits":"2",},
{"lineNum":"   98","line":"            e.write_all(&zeroes).unwrap();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"        }"},
{"lineNum":"  100","line":"        let pad_length = zeroes.len() - (e.length % BLOCK_SIZE);","class":"linePartCov","hits":"1","order":"3556","possible_hits":"2",},
{"lineNum":"  101","line":"        e.write_all(&zeroes[..pad_length]).unwrap();","class":"lineCov","hits":"1","order":"3557","possible_hits":"1",},
{"lineNum":"  102","line":"        debug_assert_eq!(e.length % BLOCK_SIZE, zeroes.len());","class":"linePartCov","hits":"1","order":"3558","possible_hits":"2",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"        e.write_u64::<BigEndian>(8 * data_len).unwrap();","class":"linePartCov","hits":"2","order":"3559","possible_hits":"4",},
{"lineNum":"  105","line":"        debug_assert_eq!(e.length % BLOCK_SIZE, 0);","class":"linePartCov","hits":"1","order":"3571","possible_hits":"2",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"        Hash(e.midstate())","class":"lineCov","hits":"2","order":"3572","possible_hits":"2",},
{"lineNum":"  108","line":"    }","class":"lineCov","hits":"1","order":"3640","possible_hits":"1",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    #[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  111","line":"    fn from_engine(e: HashEngine) -> Hash {"},
{"lineNum":"  112","line":"        Hash(e.midstate())"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    const LEN: usize = 32;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    fn from_slice(sl: &[u8]) -> Result<Hash, Error> {","class":"lineCov","hits":"1","order":"2845","possible_hits":"1",},
{"lineNum":"  118","line":"        if sl.len() != 32 {","class":"linePartCov","hits":"1","order":"2846","possible_hits":"2",},
{"lineNum":"  119","line":"            Err(Error::InvalidLength(Self::LEN, sl.len()))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"        } else {"},
{"lineNum":"  121","line":"            let mut ret = [0; 32];","class":"lineCov","hits":"1","order":"2847","possible_hits":"1",},
{"lineNum":"  122","line":"            ret.copy_from_slice(sl);","class":"lineCov","hits":"1","order":"2848","possible_hits":"1",},
{"lineNum":"  123","line":"            Ok(Hash(ret))","class":"lineCov","hits":"1","order":"2849","possible_hits":"1",},
{"lineNum":"  124","line":"        }"},
{"lineNum":"  125","line":"    }","class":"linePartCov","hits":"1","order":"2850","possible_hits":"2",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    fn into_inner(self) -> Self::Inner {"},
{"lineNum":"  128","line":"        self.0"},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":"}"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"macro_rules! Ch( ($x:expr, $y:expr, $z:expr) => ($z ^ ($x & ($y ^ $z))) );"},
{"lineNum":"  133","line":"macro_rules! Maj( ($x:expr, $y:expr, $z:expr) => (($x & $y) | ($z & ($x | $y))) );"},
{"lineNum":"  134","line":"macro_rules! Sigma0( ($x:expr) => (circular_lshift32!(30, $x) ^ circular_lshift32!(19, $x) ^ circular_lshift32!(10, $x)) ); macro_rules! Sigma1( ($x:expr) => (circular_lshift32!(26, $x) ^ circular_lshift32!(21, $x) ^ circular_lshift32!(7, $x)) );"},
{"lineNum":"  135","line":"macro_rules! sigma0( ($x:expr) => (circular_lshift32!(25, $x) ^ circular_lshift32!(14, $x) ^ ($x >> 3)) );"},
{"lineNum":"  136","line":"macro_rules! sigma1( ($x:expr) => (circular_lshift32!(15, $x) ^ circular_lshift32!(13, $x) ^ ($x >> 10)) );"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"macro_rules! round("},
{"lineNum":"  139","line":"    // first round"},
{"lineNum":"  140","line":"    ($a:expr, $b:expr, $c:expr, $d:expr, $e:expr, $f:expr, $g:expr, $h:expr, $k:expr, $w:expr) => ("},
{"lineNum":"  141","line":"        let t1 = $h.wrapping_add(Sigma1!($e)).wrapping_add(Ch!($e, $f, $g)).wrapping_add($k).wrapping_add($w);"},
{"lineNum":"  142","line":"        let t2 = Sigma0!($a).wrapping_add(Maj!($a, $b, $c));"},
{"lineNum":"  143","line":"        $d = $d.wrapping_add(t1);"},
{"lineNum":"  144","line":"        $h = t1.wrapping_add(t2);"},
{"lineNum":"  145","line":"    );"},
{"lineNum":"  146","line":"    // later rounds we reassign $w before doing the first-round computation"},
{"lineNum":"  147","line":"    ($a:expr, $b:expr, $c:expr, $d:expr, $e:expr, $f:expr, $g:expr, $h:expr, $k:expr, $w:expr, $w1:expr, $w2:expr, $w3:expr) => ("},
{"lineNum":"  148","line":"        $w = $w.wrapping_add(sigma1!($w1)).wrapping_add($w2).wrapping_add(sigma0!($w3));"},
{"lineNum":"  149","line":"        round!($a, $b, $c, $d, $e, $f, $g, $h, $k, $w);"},
{"lineNum":"  150","line":"    )"},
{"lineNum":"  151","line":");"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"impl HashEngine {"},
{"lineNum":"  154","line":"    // Algorithm copied from libsecp256k1"},
{"lineNum":"  155","line":"    fn process_block(&mut self) {","class":"lineCov","hits":"1","order":"3433","possible_hits":"1",},
{"lineNum":"  156","line":"        debug_assert_eq!(self.buffer.len(), BLOCK_SIZE);","class":"linePartCov","hits":"1","order":"3434","possible_hits":"2",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        let mut w = [0u32; 16];","class":"lineCov","hits":"1","order":"3435","possible_hits":"1",},
{"lineNum":"  159","line":"        BigEndian::read_u32_into(&self.buffer, &mut w);","class":"lineCov","hits":"1","order":"3436","possible_hits":"1",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        let mut a = self.h[0];","class":"lineCov","hits":"1","order":"3465","possible_hits":"1",},
{"lineNum":"  162","line":"        let mut b = self.h[1];","class":"lineCov","hits":"1","order":"3466","possible_hits":"1",},
{"lineNum":"  163","line":"        let mut c = self.h[2];","class":"lineCov","hits":"1","order":"3467","possible_hits":"1",},
{"lineNum":"  164","line":"        let mut d = self.h[3];","class":"lineCov","hits":"1","order":"3468","possible_hits":"1",},
{"lineNum":"  165","line":"        let mut e = self.h[4];","class":"lineCov","hits":"1","order":"3469","possible_hits":"1",},
{"lineNum":"  166","line":"        let mut f = self.h[5];","class":"lineCov","hits":"1","order":"3470","possible_hits":"1",},
{"lineNum":"  167","line":"        let mut g = self.h[6];","class":"lineCov","hits":"1","order":"3471","possible_hits":"1",},
{"lineNum":"  168","line":"        let mut h = self.h[7];","class":"lineCov","hits":"1","order":"3472","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"        round!(a, b, c, d, e, f, g, h, 0x428a2f98, w[0]);","class":"linePartCov","hits":"1","order":"3473","possible_hits":"2",},
{"lineNum":"  171","line":"        round!(h, a, b, c, d, e, f, g, 0x71374491, w[1]);","class":"linePartCov","hits":"1","order":"3474","possible_hits":"2",},
{"lineNum":"  172","line":"        round!(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w[2]);","class":"linePartCov","hits":"1","order":"3475","possible_hits":"2",},
{"lineNum":"  173","line":"        round!(f, g, h, a, b, c, d, e, 0xe9b5dba5, w[3]);","class":"linePartCov","hits":"1","order":"3476","possible_hits":"2",},
{"lineNum":"  174","line":"        round!(e, f, g, h, a, b, c, d, 0x3956c25b, w[4]);","class":"linePartCov","hits":"1","order":"3477","possible_hits":"2",},
{"lineNum":"  175","line":"        round!(d, e, f, g, h, a, b, c, 0x59f111f1, w[5]);","class":"linePartCov","hits":"1","order":"3478","possible_hits":"2",},
{"lineNum":"  176","line":"        round!(c, d, e, f, g, h, a, b, 0x923f82a4, w[6]);","class":"linePartCov","hits":"1","order":"3479","possible_hits":"2",},
{"lineNum":"  177","line":"        round!(b, c, d, e, f, g, h, a, 0xab1c5ed5, w[7]);","class":"linePartCov","hits":"1","order":"3480","possible_hits":"2",},
{"lineNum":"  178","line":"        round!(a, b, c, d, e, f, g, h, 0xd807aa98, w[8]);","class":"linePartCov","hits":"1","order":"3481","possible_hits":"2",},
{"lineNum":"  179","line":"        round!(h, a, b, c, d, e, f, g, 0x12835b01, w[9]);","class":"linePartCov","hits":"1","order":"3482","possible_hits":"2",},
{"lineNum":"  180","line":"        round!(g, h, a, b, c, d, e, f, 0x243185be, w[10]);","class":"linePartCov","hits":"1","order":"3483","possible_hits":"2",},
{"lineNum":"  181","line":"        round!(f, g, h, a, b, c, d, e, 0x550c7dc3, w[11]);","class":"linePartCov","hits":"1","order":"3484","possible_hits":"2",},
{"lineNum":"  182","line":"        round!(e, f, g, h, a, b, c, d, 0x72be5d74, w[12]);","class":"linePartCov","hits":"1","order":"3485","possible_hits":"2",},
{"lineNum":"  183","line":"        round!(d, e, f, g, h, a, b, c, 0x80deb1fe, w[13]);","class":"linePartCov","hits":"1","order":"3486","possible_hits":"2",},
{"lineNum":"  184","line":"        round!(c, d, e, f, g, h, a, b, 0x9bdc06a7, w[14]);","class":"linePartCov","hits":"1","order":"3487","possible_hits":"2",},
{"lineNum":"  185","line":"        round!(b, c, d, e, f, g, h, a, 0xc19bf174, w[15]);","class":"linePartCov","hits":"1","order":"3488","possible_hits":"2",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"        round!(a, b, c, d, e, f, g, h, 0xe49b69c1, w[0], w[14], w[9], w[1]);","class":"linePartCov","hits":"1","order":"3489","possible_hits":"2",},
{"lineNum":"  188","line":"        round!(h, a, b, c, d, e, f, g, 0xefbe4786, w[1], w[15], w[10], w[2]);","class":"linePartCov","hits":"1","order":"3490","possible_hits":"2",},
{"lineNum":"  189","line":"        round!(g, h, a, b, c, d, e, f, 0x0fc19dc6, w[2], w[0], w[11], w[3]);","class":"linePartCov","hits":"1","order":"3491","possible_hits":"2",},
{"lineNum":"  190","line":"        round!(f, g, h, a, b, c, d, e, 0x240ca1cc, w[3], w[1], w[12], w[4]);","class":"linePartCov","hits":"1","order":"3492","possible_hits":"2",},
{"lineNum":"  191","line":"        round!(e, f, g, h, a, b, c, d, 0x2de92c6f, w[4], w[2], w[13], w[5]);","class":"linePartCov","hits":"1","order":"3493","possible_hits":"2",},
{"lineNum":"  192","line":"        round!(d, e, f, g, h, a, b, c, 0x4a7484aa, w[5], w[3], w[14], w[6]);","class":"linePartCov","hits":"1","order":"3494","possible_hits":"2",},
{"lineNum":"  193","line":"        round!(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w[6], w[4], w[15], w[7]);","class":"linePartCov","hits":"1","order":"3495","possible_hits":"2",},
{"lineNum":"  194","line":"        round!(b, c, d, e, f, g, h, a, 0x76f988da, w[7], w[5], w[0], w[8]);","class":"linePartCov","hits":"1","order":"3496","possible_hits":"2",},
{"lineNum":"  195","line":"        round!(a, b, c, d, e, f, g, h, 0x983e5152, w[8], w[6], w[1], w[9]);","class":"linePartCov","hits":"1","order":"3497","possible_hits":"2",},
{"lineNum":"  196","line":"        round!(h, a, b, c, d, e, f, g, 0xa831c66d, w[9], w[7], w[2], w[10]);","class":"linePartCov","hits":"1","order":"3498","possible_hits":"2",},
{"lineNum":"  197","line":"        round!(g, h, a, b, c, d, e, f, 0xb00327c8, w[10], w[8], w[3], w[11]);","class":"linePartCov","hits":"1","order":"3499","possible_hits":"2",},
{"lineNum":"  198","line":"        round!(f, g, h, a, b, c, d, e, 0xbf597fc7, w[11], w[9], w[4], w[12]);","class":"linePartCov","hits":"1","order":"3500","possible_hits":"2",},
{"lineNum":"  199","line":"        round!(e, f, g, h, a, b, c, d, 0xc6e00bf3, w[12], w[10], w[5], w[13]);","class":"linePartCov","hits":"1","order":"3501","possible_hits":"2",},
{"lineNum":"  200","line":"        round!(d, e, f, g, h, a, b, c, 0xd5a79147, w[13], w[11], w[6], w[14]);","class":"linePartCov","hits":"1","order":"3502","possible_hits":"2",},
{"lineNum":"  201","line":"        round!(c, d, e, f, g, h, a, b, 0x06ca6351, w[14], w[12], w[7], w[15]);","class":"linePartCov","hits":"1","order":"3503","possible_hits":"2",},
{"lineNum":"  202","line":"        round!(b, c, d, e, f, g, h, a, 0x14292967, w[15], w[13], w[8], w[0]);","class":"linePartCov","hits":"1","order":"3504","possible_hits":"2",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        round!(a, b, c, d, e, f, g, h, 0x27b70a85, w[0], w[14], w[9], w[1]);","class":"linePartCov","hits":"1","order":"3505","possible_hits":"2",},
{"lineNum":"  205","line":"        round!(h, a, b, c, d, e, f, g, 0x2e1b2138, w[1], w[15], w[10], w[2]);","class":"linePartCov","hits":"1","order":"3506","possible_hits":"2",},
{"lineNum":"  206","line":"        round!(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w[2], w[0], w[11], w[3]);","class":"linePartCov","hits":"1","order":"3507","possible_hits":"2",},
{"lineNum":"  207","line":"        round!(f, g, h, a, b, c, d, e, 0x53380d13, w[3], w[1], w[12], w[4]);","class":"linePartCov","hits":"1","order":"3508","possible_hits":"2",},
{"lineNum":"  208","line":"        round!(e, f, g, h, a, b, c, d, 0x650a7354, w[4], w[2], w[13], w[5]);","class":"linePartCov","hits":"1","order":"3509","possible_hits":"2",},
{"lineNum":"  209","line":"        round!(d, e, f, g, h, a, b, c, 0x766a0abb, w[5], w[3], w[14], w[6]);","class":"linePartCov","hits":"1","order":"3510","possible_hits":"2",},
{"lineNum":"  210","line":"        round!(c, d, e, f, g, h, a, b, 0x81c2c92e, w[6], w[4], w[15], w[7]);","class":"linePartCov","hits":"1","order":"3511","possible_hits":"2",},
{"lineNum":"  211","line":"        round!(b, c, d, e, f, g, h, a, 0x92722c85, w[7], w[5], w[0], w[8]);","class":"linePartCov","hits":"1","order":"3512","possible_hits":"2",},
{"lineNum":"  212","line":"        round!(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w[8], w[6], w[1], w[9]);","class":"linePartCov","hits":"1","order":"3513","possible_hits":"2",},
{"lineNum":"  213","line":"        round!(h, a, b, c, d, e, f, g, 0xa81a664b, w[9], w[7], w[2], w[10]);","class":"linePartCov","hits":"1","order":"3514","possible_hits":"2",},
{"lineNum":"  214","line":"        round!(g, h, a, b, c, d, e, f, 0xc24b8b70, w[10], w[8], w[3], w[11]);","class":"linePartCov","hits":"1","order":"3515","possible_hits":"2",},
{"lineNum":"  215","line":"        round!(f, g, h, a, b, c, d, e, 0xc76c51a3, w[11], w[9], w[4], w[12]);","class":"linePartCov","hits":"1","order":"3516","possible_hits":"2",},
{"lineNum":"  216","line":"        round!(e, f, g, h, a, b, c, d, 0xd192e819, w[12], w[10], w[5], w[13]);","class":"linePartCov","hits":"1","order":"3517","possible_hits":"2",},
{"lineNum":"  217","line":"        round!(d, e, f, g, h, a, b, c, 0xd6990624, w[13], w[11], w[6], w[14]);","class":"linePartCov","hits":"1","order":"3518","possible_hits":"2",},
{"lineNum":"  218","line":"        round!(c, d, e, f, g, h, a, b, 0xf40e3585, w[14], w[12], w[7], w[15]);","class":"linePartCov","hits":"1","order":"3519","possible_hits":"2",},
{"lineNum":"  219","line":"        round!(b, c, d, e, f, g, h, a, 0x106aa070, w[15], w[13], w[8], w[0]);","class":"linePartCov","hits":"1","order":"3520","possible_hits":"2",},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"        round!(a, b, c, d, e, f, g, h, 0x19a4c116, w[0], w[14], w[9], w[1]);","class":"linePartCov","hits":"1","order":"3521","possible_hits":"2",},
{"lineNum":"  222","line":"        round!(h, a, b, c, d, e, f, g, 0x1e376c08, w[1], w[15], w[10], w[2]);","class":"linePartCov","hits":"1","order":"3522","possible_hits":"2",},
{"lineNum":"  223","line":"        round!(g, h, a, b, c, d, e, f, 0x2748774c, w[2], w[0], w[11], w[3]);","class":"linePartCov","hits":"1","order":"3523","possible_hits":"2",},
{"lineNum":"  224","line":"        round!(f, g, h, a, b, c, d, e, 0x34b0bcb5, w[3], w[1], w[12], w[4]);","class":"linePartCov","hits":"1","order":"3524","possible_hits":"2",},
{"lineNum":"  225","line":"        round!(e, f, g, h, a, b, c, d, 0x391c0cb3, w[4], w[2], w[13], w[5]);","class":"linePartCov","hits":"1","order":"3525","possible_hits":"2",},
{"lineNum":"  226","line":"        round!(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w[5], w[3], w[14], w[6]);","class":"linePartCov","hits":"1","order":"3526","possible_hits":"2",},
{"lineNum":"  227","line":"        round!(c, d, e, f, g, h, a, b, 0x5b9cca4f, w[6], w[4], w[15], w[7]);","class":"linePartCov","hits":"1","order":"3527","possible_hits":"2",},
{"lineNum":"  228","line":"        round!(b, c, d, e, f, g, h, a, 0x682e6ff3, w[7], w[5], w[0], w[8]);","class":"linePartCov","hits":"1","order":"3528","possible_hits":"2",},
{"lineNum":"  229","line":"        round!(a, b, c, d, e, f, g, h, 0x748f82ee, w[8], w[6], w[1], w[9]);","class":"linePartCov","hits":"1","order":"3529","possible_hits":"2",},
{"lineNum":"  230","line":"        round!(h, a, b, c, d, e, f, g, 0x78a5636f, w[9], w[7], w[2], w[10]);","class":"linePartCov","hits":"1","order":"3530","possible_hits":"2",},
{"lineNum":"  231","line":"        round!(g, h, a, b, c, d, e, f, 0x84c87814, w[10], w[8], w[3], w[11]);","class":"linePartCov","hits":"1","order":"3531","possible_hits":"2",},
{"lineNum":"  232","line":"        round!(f, g, h, a, b, c, d, e, 0x8cc70208, w[11], w[9], w[4], w[12]);","class":"linePartCov","hits":"1","order":"3532","possible_hits":"2",},
{"lineNum":"  233","line":"        round!(e, f, g, h, a, b, c, d, 0x90befffa, w[12], w[10], w[5], w[13]);","class":"linePartCov","hits":"1","order":"3533","possible_hits":"2",},
{"lineNum":"  234","line":"        round!(d, e, f, g, h, a, b, c, 0xa4506ceb, w[13], w[11], w[6], w[14]);","class":"linePartCov","hits":"1","order":"3534","possible_hits":"2",},
{"lineNum":"  235","line":"        round!(c, d, e, f, g, h, a, b, 0xbef9a3f7, w[14], w[12], w[7], w[15]);","class":"linePartCov","hits":"1","order":"3535","possible_hits":"2",},
{"lineNum":"  236","line":"        round!(b, c, d, e, f, g, h, a, 0xc67178f2, w[15], w[13], w[8], w[0]);","class":"linePartCov","hits":"1","order":"3536","possible_hits":"2",},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"        self.h[0] = self.h[0].wrapping_add(a);","class":"lineCov","hits":"1","order":"3537","possible_hits":"1",},
{"lineNum":"  239","line":"        self.h[1] = self.h[1].wrapping_add(b);","class":"lineCov","hits":"1","order":"3538","possible_hits":"1",},
{"lineNum":"  240","line":"        self.h[2] = self.h[2].wrapping_add(c);","class":"lineCov","hits":"1","order":"3539","possible_hits":"1",},
{"lineNum":"  241","line":"        self.h[3] = self.h[3].wrapping_add(d);","class":"lineCov","hits":"1","order":"3540","possible_hits":"1",},
{"lineNum":"  242","line":"        self.h[4] = self.h[4].wrapping_add(e);","class":"lineCov","hits":"1","order":"3541","possible_hits":"1",},
{"lineNum":"  243","line":"        self.h[5] = self.h[5].wrapping_add(f);","class":"lineCov","hits":"1","order":"3542","possible_hits":"1",},
{"lineNum":"  244","line":"        self.h[6] = self.h[6].wrapping_add(g);","class":"lineCov","hits":"1","order":"3543","possible_hits":"1",},
{"lineNum":"  245","line":"        self.h[7] = self.h[7].wrapping_add(h);","class":"lineCov","hits":"1","order":"3544","possible_hits":"1",},
{"lineNum":"  246","line":"    }","class":"lineCov","hits":"1","order":"3545","possible_hits":"1",},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"#[cfg(test)]"},
{"lineNum":"  250","line":"mod tests {"},
{"lineNum":"  251","line":"    use std::io::Write;"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    use sha256;"},
{"lineNum":"  254","line":"    use hex::{FromHex, ToHex};"},
{"lineNum":"  255","line":"    use {Hash, HashEngine};"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"    #[derive(Clone)]"},
{"lineNum":"  258","line":"    struct Test {"},
{"lineNum":"  259","line":"        input: &\'static str,"},
{"lineNum":"  260","line":"        output: Vec<u8>,"},
{"lineNum":"  261","line":"        output_str: &\'static str,"},
{"lineNum":"  262","line":"    }"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    #[test]"},
{"lineNum":"  265","line":"    fn test() {"},
{"lineNum":"  266","line":"        let tests = vec!["},
{"lineNum":"  267","line":"            // Examples from wikipedia"},
{"lineNum":"  268","line":"            Test {"},
{"lineNum":"  269","line":"                input: \"\","},
{"lineNum":"  270","line":"                output: vec!["},
{"lineNum":"  271","line":"                    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,"},
{"lineNum":"  272","line":"                    0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,"},
{"lineNum":"  273","line":"                    0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,"},
{"lineNum":"  274","line":"                    0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,"},
{"lineNum":"  275","line":"                ],"},
{"lineNum":"  276","line":"                output_str: \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\""},
{"lineNum":"  277","line":"            },"},
{"lineNum":"  278","line":"            Test {"},
{"lineNum":"  279","line":"                input: \"The quick brown fox jumps over the lazy dog\","},
{"lineNum":"  280","line":"                output: vec!["},
{"lineNum":"  281","line":"                    0xd7, 0xa8, 0xfb, 0xb3, 0x07, 0xd7, 0x80, 0x94,"},
{"lineNum":"  282","line":"                    0x69, 0xca, 0x9a, 0xbc, 0xb0, 0x08, 0x2e, 0x4f,"},
{"lineNum":"  283","line":"                    0x8d, 0x56, 0x51, 0xe4, 0x6d, 0x3c, 0xdb, 0x76,"},
{"lineNum":"  284","line":"                    0x2d, 0x02, 0xd0, 0xbf, 0x37, 0xc9, 0xe5, 0x92,"},
{"lineNum":"  285","line":"                ],"},
{"lineNum":"  286","line":"                output_str: \"d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592\","},
{"lineNum":"  287","line":"            },"},
{"lineNum":"  288","line":"            Test {"},
{"lineNum":"  289","line":"                input: \"The quick brown fox jumps over the lazy dog.\","},
{"lineNum":"  290","line":"                output: vec!["},
{"lineNum":"  291","line":"                    0xef, 0x53, 0x7f, 0x25, 0xc8, 0x95, 0xbf, 0xa7,"},
{"lineNum":"  292","line":"                    0x82, 0x52, 0x65, 0x29, 0xa9, 0xb6, 0x3d, 0x97,"},
{"lineNum":"  293","line":"                    0xaa, 0x63, 0x15, 0x64, 0xd5, 0xd7, 0x89, 0xc2,"},
{"lineNum":"  294","line":"                    0xb7, 0x65, 0x44, 0x8c, 0x86, 0x35, 0xfb, 0x6c,"},
{"lineNum":"  295","line":"                ],"},
{"lineNum":"  296","line":"                output_str: \"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c\","},
{"lineNum":"  297","line":"            },"},
{"lineNum":"  298","line":"        ];"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"        for test in tests {"},
{"lineNum":"  301","line":"            // Hash through high-level API, check hex encoding/decoding"},
{"lineNum":"  302","line":"            let hash = sha256::Hash::hash(&test.input.as_bytes());"},
{"lineNum":"  303","line":"            assert_eq!(hash, sha256::Hash::from_hex(test.output_str).expect(\"parse hex\"));"},
{"lineNum":"  304","line":"            assert_eq!(&hash[..], &test.output[..]);"},
{"lineNum":"  305","line":"            assert_eq!(&hash.to_hex(), &test.output_str);"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"            // Hash through engine, checking that we can input byte by byte"},
{"lineNum":"  308","line":"            let mut engine = sha256::Hash::engine();"},
{"lineNum":"  309","line":"            for ch in test.input.as_bytes() {"},
{"lineNum":"  310","line":"                engine.write_all(&[*ch]).expect(\"write to engine\");"},
{"lineNum":"  311","line":"            }"},
{"lineNum":"  312","line":"            let manual_hash = sha256::Hash::from_engine(engine);"},
{"lineNum":"  313","line":"            assert_eq!(hash, manual_hash);"},
{"lineNum":"  314","line":"            assert_eq!(hash.into_inner()[..].as_ref(), test.output.as_slice());"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    #[test]"},
{"lineNum":"  319","line":"    fn midstate() {"},
{"lineNum":"  320","line":"        // Test vector obtained by doing an asset issuance on Elements"},
{"lineNum":"  321","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  322","line":"        // sha256dhash of outpoint"},
{"lineNum":"  323","line":"        // 73828cbc65fd68ab78dc86992b76ae50ae2bf8ceedbe8de0483172f0886219f7:0"},
{"lineNum":"  324","line":"        engine.input(&["},
{"lineNum":"  325","line":"            0x9d, 0xd0, 0x1b, 0x56, 0xb1, 0x56, 0x45, 0x14,"},
{"lineNum":"  326","line":"            0x3e, 0xad, 0x15, 0x8d, 0xec, 0x19, 0xf8, 0xce,"},
{"lineNum":"  327","line":"            0xa9, 0x0b, 0xd0, 0xa9, 0xb2, 0xf8, 0x1d, 0x21,"},
{"lineNum":"  328","line":"            0xff, 0xa3, 0xa4, 0xc6, 0x44, 0x81, 0xd4, 0x1c,"},
{"lineNum":"  329","line":"        ]);"},
{"lineNum":"  330","line":"        // 32 bytes of zeroes representing \"new asset\""},
{"lineNum":"  331","line":"        engine.input(&[0; 32]);"},
{"lineNum":"  332","line":"        assert_eq!("},
{"lineNum":"  333","line":"            engine.midstate(),"},
{"lineNum":"  334","line":"            // RPC output"},
{"lineNum":"  335","line":"            ["},
{"lineNum":"  336","line":"                0x0b, 0xcf, 0xe0, 0xe5, 0x4e, 0x6c, 0xc7, 0xd3,"},
{"lineNum":"  337","line":"                0x4f, 0x4f, 0x7c, 0x1d, 0xf0, 0xb0, 0xf5, 0x03,"},
{"lineNum":"  338","line":"                0xf2, 0xf7, 0x12, 0x91, 0x2a, 0x06, 0x05, 0xb4,"},
{"lineNum":"  339","line":"                0x14, 0xed, 0x33, 0x7f, 0x7f, 0x03, 0x2e, 0x03,"},
{"lineNum":"  340","line":"            ]"},
{"lineNum":"  341","line":"        );"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    #[cfg(feature=\"serde\")]"},
{"lineNum":"  345","line":"    #[test]"},
{"lineNum":"  346","line":"    fn sha256_serde() {"},
{"lineNum":"  347","line":"        use serde_test::{Configure, Token, assert_tokens};"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"        static HASH_BYTES: [u8; 32] = ["},
{"lineNum":"  350","line":"            0xef, 0x53, 0x7f, 0x25, 0xc8, 0x95, 0xbf, 0xa7,"},
{"lineNum":"  351","line":"            0x82, 0x52, 0x65, 0x29, 0xa9, 0xb6, 0x3d, 0x97,"},
{"lineNum":"  352","line":"            0xaa, 0x63, 0x15, 0x64, 0xd5, 0xd7, 0x89, 0xc2,"},
{"lineNum":"  353","line":"            0xb7, 0x65, 0x44, 0x8c, 0x86, 0x35, 0xfb, 0x6c,"},
{"lineNum":"  354","line":"        ];"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"        let hash = sha256::Hash::from_slice(&HASH_BYTES).expect(\"right number of bytes\");"},
{"lineNum":"  357","line":"        assert_tokens(&hash.compact(), &[Token::BorrowedBytes(&HASH_BYTES[..])]);"},
{"lineNum":"  358","line":"        assert_tokens(&hash.readable(), &[Token::Str(\"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c\")]);"},
{"lineNum":"  359","line":"    }"},
{"lineNum":"  360","line":"}"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"#[cfg(all(test, feature=\"unstable\"))]"},
{"lineNum":"  363","line":"mod benches {"},
{"lineNum":"  364","line":"    use std::io::Write;"},
{"lineNum":"  365","line":"    use test::Bencher;"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"    use sha256;"},
{"lineNum":"  368","line":"    use Hash;"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"    #[bench]"},
{"lineNum":"  371","line":"    pub fn sha256_10(bh: & mut Bencher) {"},
{"lineNum":"  372","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  373","line":"        let bytes = [1u8; 10];"},
{"lineNum":"  374","line":"        bh.iter( || {"},
{"lineNum":"  375","line":"            engine.write_all(&bytes).expect(\"write\");"},
{"lineNum":"  376","line":"        });"},
{"lineNum":"  377","line":"        bh.bytes = bytes.len() as u64;"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    #[bench]"},
{"lineNum":"  381","line":"    pub fn sha256_1k(bh: & mut Bencher) {"},
{"lineNum":"  382","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  383","line":"        let bytes = [1u8; 1024];"},
{"lineNum":"  384","line":"        bh.iter( || {"},
{"lineNum":"  385","line":"            engine.write_all(&bytes).expect(\"write\");"},
{"lineNum":"  386","line":"        });"},
{"lineNum":"  387","line":"        bh.bytes = bytes.len() as u64;"},
{"lineNum":"  388","line":"    }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    #[bench]"},
{"lineNum":"  391","line":"    pub fn sha256_64k(bh: & mut Bencher) {"},
{"lineNum":"  392","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  393","line":"        let bytes = [1u8; 65536];"},
{"lineNum":"  394","line":"        bh.iter( || {"},
{"lineNum":"  395","line":"            engine.write_all(&bytes).expect(\"write\");"},
{"lineNum":"  396","line":"        });"},
{"lineNum":"  397","line":"        bh.bytes = bytes.len() as u64;"},
{"lineNum":"  398","line":"    }"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-19f07d0577b73f6d", "date" : "2019-06-01 07:50:27", "instrumented" : 117, "covered" : 115,};
var merged_data = [];
