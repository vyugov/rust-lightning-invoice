var data = {lines:[
{"lineNum":"    1","line":"/**********************************************************************"},
{"lineNum":"    2","line":" * Copyright (c) 2013, 2014 Pieter Wuille                             *"},
{"lineNum":"    3","line":" * Distributed under the MIT software license, see the accompanying   *"},
{"lineNum":"    4","line":" * file COPYING or http://www.opensource.org/licenses/mit-license.php.*"},
{"lineNum":"    5","line":" **********************************************************************/"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#ifndef SECP256K1_UTIL_H"},
{"lineNum":"    8","line":"#define SECP256K1_UTIL_H"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#if defined HAVE_CONFIG_H"},
{"lineNum":"   11","line":"#include \"libsecp256k1-config.h\""},
{"lineNum":"   12","line":"#endif"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"#include <stdlib.h>"},
{"lineNum":"   15","line":"#include <stdint.h>"},
{"lineNum":"   16","line":"#include <stdio.h>"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"typedef struct {"},
{"lineNum":"   19","line":"    void (*fn)(const char *text, void* data);"},
{"lineNum":"   20","line":"    const void* data;"},
{"lineNum":"   21","line":"} secp256k1_callback;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"    cb->fn(text, (void*)cb->data);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#ifdef DETERMINISTIC"},
{"lineNum":"   28","line":"#define TEST_FAILURE(msg) do { \\"},
{"lineNum":"   29","line":"    fprintf(stderr, \"%s\\n\", msg); \\"},
{"lineNum":"   30","line":"    abort(); \\"},
{"lineNum":"   31","line":"} while(0);"},
{"lineNum":"   32","line":"#else"},
{"lineNum":"   33","line":"#define TEST_FAILURE(msg) do { \\"},
{"lineNum":"   34","line":"    fprintf(stderr, \"%s:%d: %s\\n\", __FILE__, __LINE__, msg); \\"},
{"lineNum":"   35","line":"    abort(); \\"},
{"lineNum":"   36","line":"} while(0)"},
{"lineNum":"   37","line":"#endif"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#ifdef HAVE_BUILTIN_EXPECT"},
{"lineNum":"   40","line":"#define EXPECT(x,c) __builtin_expect((x),(c))"},
{"lineNum":"   41","line":"#else"},
{"lineNum":"   42","line":"#define EXPECT(x,c) (x)"},
{"lineNum":"   43","line":"#endif"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#ifdef DETERMINISTIC"},
{"lineNum":"   46","line":"#define CHECK(cond) do { \\"},
{"lineNum":"   47","line":"    if (EXPECT(!(cond), 0)) { \\"},
{"lineNum":"   48","line":"        TEST_FAILURE(\"test condition failed\"); \\"},
{"lineNum":"   49","line":"    } \\"},
{"lineNum":"   50","line":"} while(0)"},
{"lineNum":"   51","line":"#else"},
{"lineNum":"   52","line":"#define CHECK(cond) do { \\"},
{"lineNum":"   53","line":"    if (EXPECT(!(cond), 0)) { \\"},
{"lineNum":"   54","line":"        TEST_FAILURE(\"test condition failed: \" #cond); \\"},
{"lineNum":"   55","line":"    } \\"},
{"lineNum":"   56","line":"} while(0)"},
{"lineNum":"   57","line":"#endif"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"/* Like assert(), but when VERIFY is defined, and side-effect safe. */"},
{"lineNum":"   60","line":"#if defined(COVERAGE)"},
{"lineNum":"   61","line":"#define VERIFY_CHECK(check)"},
{"lineNum":"   62","line":"#define VERIFY_SETUP(stmt)"},
{"lineNum":"   63","line":"#elif defined(VERIFY)"},
{"lineNum":"   64","line":"#define VERIFY_CHECK CHECK"},
{"lineNum":"   65","line":"#define VERIFY_SETUP(stmt) do { stmt; } while(0)"},
{"lineNum":"   66","line":"#else"},
{"lineNum":"   67","line":"#define VERIFY_CHECK(cond) do { (void)(cond); } while(0)"},
{"lineNum":"   68","line":"#define VERIFY_SETUP(stmt)"},
{"lineNum":"   69","line":"#endif"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {","class":"lineCov","hits":"1","order":"4115","possible_hits":"1",},
{"lineNum":"   72","line":"    void *ret = malloc(size);","class":"lineCov","hits":"1","order":"4116","possible_hits":"1",},
{"lineNum":"   73","line":"    if (ret == NULL) {","class":"lineCov","hits":"1","order":"4117","possible_hits":"1",},
{"lineNum":"   74","line":"        secp256k1_callback_call(cb, \"Out of memory\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":"    return ret;","class":"lineCov","hits":"1","order":"4118","possible_hits":"1",},
{"lineNum":"   77","line":"}","class":"linePartCov","hits":"1","order":"4119","possible_hits":"2",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"static SECP256K1_INLINE void *checked_realloc(const secp256k1_callback* cb, void *ptr, size_t size) {"},
{"lineNum":"   80","line":"    void *ret = realloc(ptr, size);"},
{"lineNum":"   81","line":"    if (ret == NULL) {"},
{"lineNum":"   82","line":"        secp256k1_callback_call(cb, \"Out of memory\");"},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":"    return ret;"},
{"lineNum":"   85","line":"}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"/* Macro for restrict, when available and not in a VERIFY build. */"},
{"lineNum":"   88","line":"#if defined(SECP256K1_BUILD) && defined(VERIFY)"},
{"lineNum":"   89","line":"# define SECP256K1_RESTRICT"},
{"lineNum":"   90","line":"#else"},
{"lineNum":"   91","line":"# if (!defined(__STDC_VERSION__) || (__STDC_VERSION__ < 199901L) )"},
{"lineNum":"   92","line":"#  if SECP256K1_GNUC_PREREQ(3,0)"},
{"lineNum":"   93","line":"#   define SECP256K1_RESTRICT __restrict__"},
{"lineNum":"   94","line":"#  elif (defined(_MSC_VER) && _MSC_VER >= 1400)"},
{"lineNum":"   95","line":"#   define SECP256K1_RESTRICT __restrict"},
{"lineNum":"   96","line":"#  else"},
{"lineNum":"   97","line":"#   define SECP256K1_RESTRICT"},
{"lineNum":"   98","line":"#  endif"},
{"lineNum":"   99","line":"# else"},
{"lineNum":"  100","line":"#  define SECP256K1_RESTRICT restrict"},
{"lineNum":"  101","line":"# endif"},
{"lineNum":"  102","line":"#endif"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"#if defined(_WIN32)"},
{"lineNum":"  105","line":"# define I64FORMAT \"I64d\""},
{"lineNum":"  106","line":"# define I64uFORMAT \"I64u\""},
{"lineNum":"  107","line":"#else"},
{"lineNum":"  108","line":"# define I64FORMAT \"lld\""},
{"lineNum":"  109","line":"# define I64uFORMAT \"llu\""},
{"lineNum":"  110","line":"#endif"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"#if defined(HAVE___INT128)"},
{"lineNum":"  113","line":"# if defined(__GNUC__)"},
{"lineNum":"  114","line":"#  define SECP256K1_GNUC_EXT __extension__"},
{"lineNum":"  115","line":"# else"},
{"lineNum":"  116","line":"#  define SECP256K1_GNUC_EXT"},
{"lineNum":"  117","line":"# endif"},
{"lineNum":"  118","line":"SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;"},
{"lineNum":"  119","line":"#endif"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"#endif /* SECP256K1_UTIL_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-19f07d0577b73f6d", "date" : "2019-06-01 07:50:27", "instrumented" : 9, "covered" : 5,};
var merged_data = [];
