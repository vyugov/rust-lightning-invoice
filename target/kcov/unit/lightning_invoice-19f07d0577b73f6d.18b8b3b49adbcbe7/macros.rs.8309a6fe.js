var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin secp256k1 bindings"},
{"lineNum":"    2","line":"// Written in 2014 by"},
{"lineNum":"    3","line":"//   Dawid Ciężarkiewicz"},
{"lineNum":"    4","line":"//   Andrew Poelstra"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    7","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    8","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    9","line":"// any warranty."},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   12","line":"// along with this software."},
{"lineNum":"   13","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// This is a macro that routinely comes in handy"},
{"lineNum":"   17","line":"macro_rules! impl_array_newtype {"},
{"lineNum":"   18","line":"    ($thing:ident, $ty:ty, $len:expr) => {"},
{"lineNum":"   19","line":"        impl Copy for $thing {}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        impl $thing {"},
{"lineNum":"   22","line":"            #[inline]"},
{"lineNum":"   23","line":"            /// Converts the object to a raw pointer for FFI interfacing"},
{"lineNum":"   24","line":"            pub fn as_ptr(&self) -> *const $ty {","class":"lineCov","hits":"2","order":"4971","possible_hits":"2",},
{"lineNum":"   25","line":"                let &$thing(ref dat) = self;","class":"lineCov","hits":"2","order":"4972","possible_hits":"2",},
{"lineNum":"   26","line":"                dat.as_ptr()","class":"lineCov","hits":"2","order":"4973","possible_hits":"2",},
{"lineNum":"   27","line":"            }","class":"linePartCov","hits":"2","order":"4974","possible_hits":"4",},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"            #[inline]"},
{"lineNum":"   30","line":"            /// Converts the object to a mutable raw pointer for FFI interfacing"},
{"lineNum":"   31","line":"            pub fn as_mut_ptr(&mut self) -> *mut $ty {"},
{"lineNum":"   32","line":"                let &mut $thing(ref mut dat) = self;"},
{"lineNum":"   33","line":"                dat.as_mut_ptr()"},
{"lineNum":"   34","line":"            }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"            #[inline]"},
{"lineNum":"   37","line":"            /// Returns the length of the object as an array"},
{"lineNum":"   38","line":"            pub fn len(&self) -> usize { $len }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"            #[inline]"},
{"lineNum":"   41","line":"            /// Returns whether the object as an array is empty"},
{"lineNum":"   42","line":"            pub fn is_empty(&self) -> bool { false }"},
{"lineNum":"   43","line":"        }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        impl PartialEq for $thing {"},
{"lineNum":"   46","line":"            #[inline]"},
{"lineNum":"   47","line":"            fn eq(&self, other: &$thing) -> bool {","class":"lineCov","hits":"2","order":"2679","possible_hits":"2",},
{"lineNum":"   48","line":"                &self[..] == &other[..]","class":"lineCov","hits":"2","order":"2680","possible_hits":"2",},
{"lineNum":"   49","line":"            }","class":"linePartCov","hits":"2","order":"2685","possible_hits":"4",},
{"lineNum":"   50","line":"        }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        impl Eq for $thing {}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"        impl PartialOrd for $thing {"},
{"lineNum":"   55","line":"            #[inline]"},
{"lineNum":"   56","line":"            fn partial_cmp(&self, other: &$thing) -> Option<::std::cmp::Ordering> {"},
{"lineNum":"   57","line":"                self[..].partial_cmp(&other[..])"},
{"lineNum":"   58","line":"            }"},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        impl Ord for $thing {"},
{"lineNum":"   62","line":"            #[inline]"},
{"lineNum":"   63","line":"            fn cmp(&self, other: &$thing) -> ::std::cmp::Ordering {"},
{"lineNum":"   64","line":"                self[..].cmp(&other[..])"},
{"lineNum":"   65","line":"            }"},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        impl Clone for $thing {"},
{"lineNum":"   69","line":"            #[inline]"},
{"lineNum":"   70","line":"            fn clone(&self) -> $thing {"},
{"lineNum":"   71","line":"                unsafe {"},
{"lineNum":"   72","line":"                    use std::intrinsics::copy_nonoverlapping;"},
{"lineNum":"   73","line":"                    use std::mem;"},
{"lineNum":"   74","line":"                    let mut ret: $thing = mem::uninitialized();"},
{"lineNum":"   75","line":"                    copy_nonoverlapping(self.as_ptr(),"},
{"lineNum":"   76","line":"                                        ret.as_mut_ptr(),"},
{"lineNum":"   77","line":"                                        $len);"},
{"lineNum":"   78","line":"                    ret"},
{"lineNum":"   79","line":"                }"},
{"lineNum":"   80","line":"            }"},
{"lineNum":"   81","line":"        }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        impl ::std::ops::Index<usize> for $thing {"},
{"lineNum":"   84","line":"            type Output = $ty;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            #[inline]"},
{"lineNum":"   87","line":"            fn index(&self, index: usize) -> &$ty {"},
{"lineNum":"   88","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"   89","line":"                &dat[index]"},
{"lineNum":"   90","line":"            }"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        impl ::std::ops::Index<::std::ops::Range<usize>> for $thing {"},
{"lineNum":"   94","line":"            type Output = [$ty];"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            #[inline]"},
{"lineNum":"   97","line":"            fn index(&self, index: ::std::ops::Range<usize>) -> &[$ty] {"},
{"lineNum":"   98","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"   99","line":"                &dat[index]"},
{"lineNum":"  100","line":"            }"},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        impl ::std::ops::Index<::std::ops::RangeTo<usize>> for $thing {"},
{"lineNum":"  104","line":"            type Output = [$ty];"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"            #[inline]"},
{"lineNum":"  107","line":"            fn index(&self, index: ::std::ops::RangeTo<usize>) -> &[$ty] {"},
{"lineNum":"  108","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"  109","line":"                &dat[index]"},
{"lineNum":"  110","line":"            }"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"        impl ::std::ops::Index<::std::ops::RangeFrom<usize>> for $thing {"},
{"lineNum":"  114","line":"            type Output = [$ty];"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"            #[inline]"},
{"lineNum":"  117","line":"            fn index(&self, index: ::std::ops::RangeFrom<usize>) -> &[$ty] {"},
{"lineNum":"  118","line":"                let &$thing(ref dat) = self;"},
{"lineNum":"  119","line":"                &dat[index]"},
{"lineNum":"  120","line":"            }"},
{"lineNum":"  121","line":"        }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        impl ::std::ops::Index<::std::ops::RangeFull> for $thing {"},
{"lineNum":"  124","line":"            type Output = [$ty];"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            #[inline]"},
{"lineNum":"  127","line":"            fn index(&self, _: ::std::ops::RangeFull) -> &[$ty] {","class":"linePartCov","hits":"2","order":"2681","possible_hits":"4",},
{"lineNum":"  128","line":"                let &$thing(ref dat) = self;","class":"linePartCov","hits":"2","order":"2682","possible_hits":"4",},
{"lineNum":"  129","line":"                &dat[..]","class":"linePartCov","hits":"2","order":"2683","possible_hits":"4",},
{"lineNum":"  130","line":"            }","class":"linePartCov","hits":"2","order":"2684","possible_hits":"8",},
{"lineNum":"  131","line":"        }"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"macro_rules! impl_pretty_debug {"},
{"lineNum":"  136","line":"    ($thing:ident) => {"},
{"lineNum":"  137","line":"        impl ::std::fmt::Debug for $thing {"},
{"lineNum":"  138","line":"            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {"},
{"lineNum":"  139","line":"                try!(write!(f, \"{}(\", stringify!($thing)));"},
{"lineNum":"  140","line":"                for i in self[..].iter().cloned() {"},
{"lineNum":"  141","line":"                    try!(write!(f, \"{:02x}\", i));"},
{"lineNum":"  142","line":"                }"},
{"lineNum":"  143","line":"                write!(f, \")\")"},
{"lineNum":"  144","line":"            }"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":"     }"},
{"lineNum":"  147","line":"}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"macro_rules! impl_raw_debug {"},
{"lineNum":"  150","line":"    ($thing:ident) => {"},
{"lineNum":"  151","line":"        impl ::std::fmt::Debug for $thing {"},
{"lineNum":"  152","line":"            fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  153","line":"                for i in self[..].iter().cloned() {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  154","line":"                    try!(write!(f, \"{:02x}\", i));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  155","line":"                }"},
{"lineNum":"  156","line":"                Ok(())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":"     }"},
{"lineNum":"  160","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-19f07d0577b73f6d", "date" : "2019-06-01 07:50:27", "instrumented" : 16, "covered" : 11,};
var merged_data = [];
