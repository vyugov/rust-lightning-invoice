var data = {lines:[
{"lineNum":"    1","line":"/**********************************************************************"},
{"lineNum":"    2","line":" * Copyright (c) 2013, 2014 Pieter Wuille                             *"},
{"lineNum":"    3","line":" * Distributed under the MIT software license, see the accompanying   *"},
{"lineNum":"    4","line":" * file COPYING or http://www.opensource.org/licenses/mit-license.php.*"},
{"lineNum":"    5","line":" **********************************************************************/"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#ifndef SECP256K1_SCALAR_REPR_IMPL_H"},
{"lineNum":"    8","line":"#define SECP256K1_SCALAR_REPR_IMPL_H"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"/* Limbs of the secp256k1 order. */"},
{"lineNum":"   11","line":"#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)"},
{"lineNum":"   12","line":"#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)"},
{"lineNum":"   13","line":"#define SECP256K1_N_2 ((uint64_t)0xFFFFFFFFFFFFFFFEULL)"},
{"lineNum":"   14","line":"#define SECP256K1_N_3 ((uint64_t)0xFFFFFFFFFFFFFFFFULL)"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"/* Limbs of 2^256 minus the secp256k1 order. */"},
{"lineNum":"   17","line":"#define SECP256K1_N_C_0 (~SECP256K1_N_0 + 1)"},
{"lineNum":"   18","line":"#define SECP256K1_N_C_1 (~SECP256K1_N_1)"},
{"lineNum":"   19","line":"#define SECP256K1_N_C_2 (1)"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"/* Limbs of half the secp256k1 order. */"},
{"lineNum":"   22","line":"#define SECP256K1_N_H_0 ((uint64_t)0xDFE92F46681B20A0ULL)"},
{"lineNum":"   23","line":"#define SECP256K1_N_H_1 ((uint64_t)0x5D576E7357A4501DULL)"},
{"lineNum":"   24","line":"#define SECP256K1_N_H_2 ((uint64_t)0xFFFFFFFFFFFFFFFFULL)"},
{"lineNum":"   25","line":"#define SECP256K1_N_H_3 ((uint64_t)0x7FFFFFFFFFFFFFFFULL)"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {","class":"lineCov","hits":"1","order":"4663","possible_hits":"1",},
{"lineNum":"   28","line":"    r->d[0] = 0;","class":"lineCov","hits":"1","order":"4664","possible_hits":"1",},
{"lineNum":"   29","line":"    r->d[1] = 0;","class":"lineCov","hits":"1","order":"4665","possible_hits":"1",},
{"lineNum":"   30","line":"    r->d[2] = 0;","class":"lineCov","hits":"1","order":"4666","possible_hits":"1",},
{"lineNum":"   31","line":"    r->d[3] = 0;","class":"lineCov","hits":"1","order":"4667","possible_hits":"1",},
{"lineNum":"   32","line":"}","class":"linePartCov","hits":"1","order":"4668","possible_hits":"2",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {","class":"lineCov","hits":"1","order":"4326","possible_hits":"1",},
{"lineNum":"   35","line":"    r->d[0] = v;","class":"lineCov","hits":"1","order":"4327","possible_hits":"1",},
{"lineNum":"   36","line":"    r->d[1] = 0;","class":"lineCov","hits":"1","order":"4328","possible_hits":"1",},
{"lineNum":"   37","line":"    r->d[2] = 0;","class":"lineCov","hits":"1","order":"4329","possible_hits":"1",},
{"lineNum":"   38","line":"    r->d[3] = 0;","class":"lineCov","hits":"1","order":"4330","possible_hits":"1",},
{"lineNum":"   39","line":"}","class":"linePartCov","hits":"1","order":"4331","possible_hits":"2",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {","class":"lineCov","hits":"1","order":"4569","possible_hits":"1",},
{"lineNum":"   42","line":"    VERIFY_CHECK((offset + count - 1) >> 6 == offset >> 6);"},
{"lineNum":"   43","line":"    return (a->d[offset >> 6] >> (offset & 0x3F)) & ((((uint64_t)1) << count) - 1);","class":"lineCov","hits":"1","order":"4570","possible_hits":"1",},
{"lineNum":"   44","line":"}","class":"linePartCov","hits":"1","order":"4571","possible_hits":"2",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {","class":"lineCov","hits":"1","order":"5070","possible_hits":"1",},
{"lineNum":"   47","line":"    VERIFY_CHECK(count < 32);"},
{"lineNum":"   48","line":"    VERIFY_CHECK(offset + count <= 256);"},
{"lineNum":"   49","line":"    if ((offset + count - 1) >> 6 == offset >> 6) {","class":"lineCov","hits":"1","order":"5071","possible_hits":"1",},
{"lineNum":"   50","line":"        return secp256k1_scalar_get_bits(a, offset, count);","class":"lineCov","hits":"1","order":"5072","possible_hits":"1",},
{"lineNum":"   51","line":"    } else {"},
{"lineNum":"   52","line":"        VERIFY_CHECK((offset >> 6) + 1 < 4);"},
{"lineNum":"   53","line":"        return ((a->d[offset >> 6] >> (offset & 0x3F)) | (a->d[(offset >> 6) + 1] << (64 - (offset & 0x3F)))) & ((((uint64_t)1) << count) - 1);","class":"lineCov","hits":"1","order":"5081","possible_hits":"1",},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":"}","class":"linePartCov","hits":"1","order":"5073","possible_hits":"2",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"2648","possible_hits":"1",},
{"lineNum":"   58","line":"    int yes = 0;","class":"lineCov","hits":"1","order":"2649","possible_hits":"1",},
{"lineNum":"   59","line":"    int no = 0;","class":"lineCov","hits":"1","order":"2650","possible_hits":"1",},
{"lineNum":"   60","line":"    no |= (a->d[3] < SECP256K1_N_3); /* No need for a > check. */","class":"lineCov","hits":"1","order":"2651","possible_hits":"1",},
{"lineNum":"   61","line":"    no |= (a->d[2] < SECP256K1_N_2);","class":"lineCov","hits":"1","order":"2652","possible_hits":"1",},
{"lineNum":"   62","line":"    yes |= (a->d[2] > SECP256K1_N_2) & ~no;","class":"lineCov","hits":"1","order":"2653","possible_hits":"1",},
{"lineNum":"   63","line":"    no |= (a->d[1] < SECP256K1_N_1);","class":"lineCov","hits":"1","order":"2654","possible_hits":"1",},
{"lineNum":"   64","line":"    yes |= (a->d[1] > SECP256K1_N_1) & ~no;","class":"lineCov","hits":"1","order":"2655","possible_hits":"1",},
{"lineNum":"   65","line":"    yes |= (a->d[0] >= SECP256K1_N_0) & ~no;","class":"lineCov","hits":"1","order":"2656","possible_hits":"1",},
{"lineNum":"   66","line":"    return yes;","class":"lineCov","hits":"1","order":"2657","possible_hits":"1",},
{"lineNum":"   67","line":"}","class":"linePartCov","hits":"1","order":"2658","possible_hits":"2",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {","class":"lineCov","hits":"1","order":"2659","possible_hits":"1",},
{"lineNum":"   70","line":"    uint128_t t;"},
{"lineNum":"   71","line":"    VERIFY_CHECK(overflow <= 1);"},
{"lineNum":"   72","line":"    t = (uint128_t)r->d[0] + overflow * SECP256K1_N_C_0;","class":"lineCov","hits":"1","order":"2660","possible_hits":"1",},
{"lineNum":"   73","line":"    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"2661","possible_hits":"1",},
{"lineNum":"   74","line":"    t += (uint128_t)r->d[1] + overflow * SECP256K1_N_C_1;","class":"lineCov","hits":"1","order":"2662","possible_hits":"1",},
{"lineNum":"   75","line":"    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"2663","possible_hits":"1",},
{"lineNum":"   76","line":"    t += (uint128_t)r->d[2] + overflow * SECP256K1_N_C_2;","class":"lineCov","hits":"1","order":"2664","possible_hits":"1",},
{"lineNum":"   77","line":"    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"2665","possible_hits":"1",},
{"lineNum":"   78","line":"    t += (uint64_t)r->d[3];","class":"lineCov","hits":"1","order":"2666","possible_hits":"1",},
{"lineNum":"   79","line":"    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;","class":"lineCov","hits":"1","order":"2667","possible_hits":"1",},
{"lineNum":"   80","line":"    return overflow;","class":"lineCov","hits":"1","order":"2668","possible_hits":"1",},
{"lineNum":"   81","line":"}","class":"linePartCov","hits":"1","order":"2669","possible_hits":"2",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {","class":"lineCov","hits":"1","order":"4552","possible_hits":"1",},
{"lineNum":"   84","line":"    int overflow;"},
{"lineNum":"   85","line":"    uint128_t t = (uint128_t)a->d[0] + b->d[0];","class":"lineCov","hits":"1","order":"4553","possible_hits":"1",},
{"lineNum":"   86","line":"    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"4554","possible_hits":"1",},
{"lineNum":"   87","line":"    t += (uint128_t)a->d[1] + b->d[1];","class":"lineCov","hits":"1","order":"4555","possible_hits":"1",},
{"lineNum":"   88","line":"    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"4556","possible_hits":"1",},
{"lineNum":"   89","line":"    t += (uint128_t)a->d[2] + b->d[2];","class":"lineCov","hits":"1","order":"4557","possible_hits":"1",},
{"lineNum":"   90","line":"    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"4558","possible_hits":"1",},
{"lineNum":"   91","line":"    t += (uint128_t)a->d[3] + b->d[3];","class":"lineCov","hits":"1","order":"4559","possible_hits":"1",},
{"lineNum":"   92","line":"    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"4560","possible_hits":"1",},
{"lineNum":"   93","line":"    overflow = t + secp256k1_scalar_check_overflow(r);","class":"lineCov","hits":"1","order":"4561","possible_hits":"1",},
{"lineNum":"   94","line":"    VERIFY_CHECK(overflow == 0 || overflow == 1);","class":"lineCov","hits":"1","order":"4562","possible_hits":"1",},
{"lineNum":"   95","line":"    secp256k1_scalar_reduce(r, overflow);","class":"lineCov","hits":"1","order":"4563","possible_hits":"1",},
{"lineNum":"   96","line":"    return overflow;","class":"lineCov","hits":"1","order":"4564","possible_hits":"1",},
{"lineNum":"   97","line":"}","class":"linePartCov","hits":"1","order":"4565","possible_hits":"2",},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {","class":"lineCov","hits":"1","order":"5035","possible_hits":"1",},
{"lineNum":"  100","line":"    uint128_t t;"},
{"lineNum":"  101","line":"    VERIFY_CHECK(bit < 256);"},
{"lineNum":"  102","line":"    bit += ((uint32_t) flag - 1) & 0x100;  /* forcing (bit >> 6) > 3 makes this a noop */","class":"lineCov","hits":"1","order":"5036","possible_hits":"1",},
{"lineNum":"  103","line":"    t = (uint128_t)r->d[0] + (((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));","class":"lineCov","hits":"1","order":"5037","possible_hits":"1",},
{"lineNum":"  104","line":"    r->d[0] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"5038","possible_hits":"1",},
{"lineNum":"  105","line":"    t += (uint128_t)r->d[1] + (((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));","class":"lineCov","hits":"1","order":"5039","possible_hits":"1",},
{"lineNum":"  106","line":"    r->d[1] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"5040","possible_hits":"1",},
{"lineNum":"  107","line":"    t += (uint128_t)r->d[2] + (((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));","class":"lineCov","hits":"1","order":"5041","possible_hits":"1",},
{"lineNum":"  108","line":"    r->d[2] = t & 0xFFFFFFFFFFFFFFFFULL; t >>= 64;","class":"lineCov","hits":"1","order":"5042","possible_hits":"1",},
{"lineNum":"  109","line":"    t += (uint128_t)r->d[3] + (((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));","class":"lineCov","hits":"1","order":"5043","possible_hits":"1",},
{"lineNum":"  110","line":"    r->d[3] = t & 0xFFFFFFFFFFFFFFFFULL;","class":"lineCov","hits":"1","order":"5044","possible_hits":"1",},
{"lineNum":"  111","line":"#ifdef VERIFY"},
{"lineNum":"  112","line":"    VERIFY_CHECK((t >> 64) == 0);"},
{"lineNum":"  113","line":"    VERIFY_CHECK(secp256k1_scalar_check_overflow(r) == 0);"},
{"lineNum":"  114","line":"#endif"},
{"lineNum":"  115","line":"}","class":"linePartCov","hits":"1","order":"5045","possible_hits":"2",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {","class":"lineCov","hits":"1","order":"2642","possible_hits":"1",},
{"lineNum":"  118","line":"    int over;"},
{"lineNum":"  119","line":"    r->d[0] = (uint64_t)b32[31] | (uint64_t)b32[30] << 8 | (uint64_t)b32[29] << 16 | (uint64_t)b32[28] << 24 | (uint64_t)b32[27] << 32 | (uint64_t)b32[26] << 40 | (uint64_t)b32[25] << 48 | (uint64_t)b32[24] << 56;","class":"lineCov","hits":"1","order":"2643","possible_hits":"1",},
{"lineNum":"  120","line":"    r->d[1] = (uint64_t)b32[23] | (uint64_t)b32[22] << 8 | (uint64_t)b32[21] << 16 | (uint64_t)b32[20] << 24 | (uint64_t)b32[19] << 32 | (uint64_t)b32[18] << 40 | (uint64_t)b32[17] << 48 | (uint64_t)b32[16] << 56;","class":"lineCov","hits":"1","order":"2644","possible_hits":"1",},
{"lineNum":"  121","line":"    r->d[2] = (uint64_t)b32[15] | (uint64_t)b32[14] << 8 | (uint64_t)b32[13] << 16 | (uint64_t)b32[12] << 24 | (uint64_t)b32[11] << 32 | (uint64_t)b32[10] << 40 | (uint64_t)b32[9] << 48 | (uint64_t)b32[8] << 56;","class":"lineCov","hits":"1","order":"2645","possible_hits":"1",},
{"lineNum":"  122","line":"    r->d[3] = (uint64_t)b32[7] | (uint64_t)b32[6] << 8 | (uint64_t)b32[5] << 16 | (uint64_t)b32[4] << 24 | (uint64_t)b32[3] << 32 | (uint64_t)b32[2] << 40 | (uint64_t)b32[1] << 48 | (uint64_t)b32[0] << 56;","class":"lineCov","hits":"1","order":"2646","possible_hits":"1",},
{"lineNum":"  123","line":"    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));","class":"lineCov","hits":"1","order":"2647","possible_hits":"1",},
{"lineNum":"  124","line":"    if (overflow) {","class":"lineCov","hits":"1","order":"2670","possible_hits":"1",},
{"lineNum":"  125","line":"        *overflow = over;","class":"lineCov","hits":"1","order":"2671","possible_hits":"1",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":"}","class":"linePartCov","hits":"1","order":"2672","possible_hits":"2",},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {","class":"lineCov","hits":"1","order":"2896","possible_hits":"1",},
{"lineNum":"  130","line":"    bin[0] = a->d[3] >> 56; bin[1] = a->d[3] >> 48; bin[2] = a->d[3] >> 40; bin[3] = a->d[3] >> 32; bin[4] = a->d[3] >> 24; bin[5] = a->d[3] >> 16; bin[6] = a->d[3] >> 8; bin[7] = a->d[3];","class":"lineCov","hits":"1","order":"2897","possible_hits":"1",},
{"lineNum":"  131","line":"    bin[8] = a->d[2] >> 56; bin[9] = a->d[2] >> 48; bin[10] = a->d[2] >> 40; bin[11] = a->d[2] >> 32; bin[12] = a->d[2] >> 24; bin[13] = a->d[2] >> 16; bin[14] = a->d[2] >> 8; bin[15] = a->d[2];","class":"lineCov","hits":"1","order":"2898","possible_hits":"1",},
{"lineNum":"  132","line":"    bin[16] = a->d[1] >> 56; bin[17] = a->d[1] >> 48; bin[18] = a->d[1] >> 40; bin[19] = a->d[1] >> 32; bin[20] = a->d[1] >> 24; bin[21] = a->d[1] >> 16; bin[22] = a->d[1] >> 8; bin[23] = a->d[1];","class":"lineCov","hits":"1","order":"2899","possible_hits":"1",},
{"lineNum":"  133","line":"    bin[24] = a->d[0] >> 56; bin[25] = a->d[0] >> 48; bin[26] = a->d[0] >> 40; bin[27] = a->d[0] >> 32; bin[28] = a->d[0] >> 24; bin[29] = a->d[0] >> 16; bin[30] = a->d[0] >> 8; bin[31] = a->d[0];","class":"lineCov","hits":"1","order":"2900","possible_hits":"1",},
{"lineNum":"  134","line":"}","class":"linePartCov","hits":"1","order":"2901","possible_hits":"2",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"4536","possible_hits":"1",},
{"lineNum":"  137","line":"    return (a->d[0] | a->d[1] | a->d[2] | a->d[3]) == 0;","class":"lineCov","hits":"1","order":"4537","possible_hits":"1",},
{"lineNum":"  138","line":"}","class":"linePartCov","hits":"1","order":"4538","possible_hits":"2",},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"4671","possible_hits":"1",},
{"lineNum":"  141","line":"    uint64_t nonzero = 0xFFFFFFFFFFFFFFFFULL * (secp256k1_scalar_is_zero(a) == 0);","class":"lineCov","hits":"1","order":"4672","possible_hits":"1",},
{"lineNum":"  142","line":"    uint128_t t = (uint128_t)(~a->d[0]) + SECP256K1_N_0 + 1;","class":"lineCov","hits":"1","order":"4673","possible_hits":"1",},
{"lineNum":"  143","line":"    r->d[0] = t & nonzero; t >>= 64;","class":"lineCov","hits":"1","order":"4674","possible_hits":"1",},
{"lineNum":"  144","line":"    t += (uint128_t)(~a->d[1]) + SECP256K1_N_1;","class":"lineCov","hits":"1","order":"4675","possible_hits":"1",},
{"lineNum":"  145","line":"    r->d[1] = t & nonzero; t >>= 64;","class":"lineCov","hits":"1","order":"4676","possible_hits":"1",},
{"lineNum":"  146","line":"    t += (uint128_t)(~a->d[2]) + SECP256K1_N_2;","class":"lineCov","hits":"1","order":"4677","possible_hits":"1",},
{"lineNum":"  147","line":"    r->d[2] = t & nonzero; t >>= 64;","class":"lineCov","hits":"1","order":"4678","possible_hits":"1",},
{"lineNum":"  148","line":"    t += (uint128_t)(~a->d[3]) + SECP256K1_N_3;","class":"lineCov","hits":"1","order":"4679","possible_hits":"1",},
{"lineNum":"  149","line":"    r->d[3] = t & nonzero;","class":"lineCov","hits":"1","order":"4680","possible_hits":"1",},
{"lineNum":"  150","line":"}","class":"linePartCov","hits":"1","order":"4681","possible_hits":"2",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {"},
{"lineNum":"  153","line":"    return ((a->d[0] ^ 1) | a->d[1] | a->d[2] | a->d[3]) == 0;"},
{"lineNum":"  154","line":"}"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"5325","possible_hits":"1",},
{"lineNum":"  157","line":"    int yes = 0;","class":"lineCov","hits":"1","order":"5326","possible_hits":"1",},
{"lineNum":"  158","line":"    int no = 0;","class":"lineCov","hits":"1","order":"5327","possible_hits":"1",},
{"lineNum":"  159","line":"    no |= (a->d[3] < SECP256K1_N_H_3);","class":"lineCov","hits":"1","order":"5328","possible_hits":"1",},
{"lineNum":"  160","line":"    yes |= (a->d[3] > SECP256K1_N_H_3) & ~no;","class":"lineCov","hits":"1","order":"5329","possible_hits":"1",},
{"lineNum":"  161","line":"    no |= (a->d[2] < SECP256K1_N_H_2) & ~yes; /* No need for a > check. */","class":"lineCov","hits":"1","order":"5330","possible_hits":"1",},
{"lineNum":"  162","line":"    no |= (a->d[1] < SECP256K1_N_H_1) & ~yes;","class":"lineCov","hits":"1","order":"5331","possible_hits":"1",},
{"lineNum":"  163","line":"    yes |= (a->d[1] > SECP256K1_N_H_1) & ~no;","class":"lineCov","hits":"1","order":"5332","possible_hits":"1",},
{"lineNum":"  164","line":"    yes |= (a->d[0] > SECP256K1_N_H_0) & ~no;","class":"lineCov","hits":"1","order":"5333","possible_hits":"1",},
{"lineNum":"  165","line":"    return yes;","class":"lineCov","hits":"1","order":"5334","possible_hits":"1",},
{"lineNum":"  166","line":"}","class":"linePartCov","hits":"1","order":"5335","possible_hits":"2",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {"},
{"lineNum":"  169","line":"    /* If we are flag = 0, mask = 00...00 and this is a no-op;"},
{"lineNum":"  170","line":"     * if we are flag = 1, mask = 11...11 and this is identical to secp256k1_scalar_negate */"},
{"lineNum":"  171","line":"    uint64_t mask = !flag - 1;"},
{"lineNum":"  172","line":"    uint64_t nonzero = (secp256k1_scalar_is_zero(r) != 0) - 1;"},
{"lineNum":"  173","line":"    uint128_t t = (uint128_t)(r->d[0] ^ mask) + ((SECP256K1_N_0 + 1) & mask);"},
{"lineNum":"  174","line":"    r->d[0] = t & nonzero; t >>= 64;"},
{"lineNum":"  175","line":"    t += (uint128_t)(r->d[1] ^ mask) + (SECP256K1_N_1 & mask);"},
{"lineNum":"  176","line":"    r->d[1] = t & nonzero; t >>= 64;"},
{"lineNum":"  177","line":"    t += (uint128_t)(r->d[2] ^ mask) + (SECP256K1_N_2 & mask);"},
{"lineNum":"  178","line":"    r->d[2] = t & nonzero; t >>= 64;"},
{"lineNum":"  179","line":"    t += (uint128_t)(r->d[3] ^ mask) + (SECP256K1_N_3 & mask);"},
{"lineNum":"  180","line":"    r->d[3] = t & nonzero;"},
{"lineNum":"  181","line":"    return 2 * (mask == 0) - 1;"},
{"lineNum":"  182","line":"}"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"/* Inspired by the macros in OpenSSL\'s crypto/bn/asm/x86_64-gcc.c. */"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"/** Add a*b to the number defined by (c0,c1,c2). c2 must never overflow. */"},
{"lineNum":"  187","line":"#define muladd(a,b) { \\"},
{"lineNum":"  188","line":"    uint64_t tl, th; \\"},
{"lineNum":"  189","line":"    { \\"},
{"lineNum":"  190","line":"        uint128_t t = (uint128_t)a * b; \\"},
{"lineNum":"  191","line":"        th = t >> 64;         /* at most 0xFFFFFFFFFFFFFFFE */ \\"},
{"lineNum":"  192","line":"        tl = t; \\"},
{"lineNum":"  193","line":"    } \\"},
{"lineNum":"  194","line":"    c0 += tl;                 /* overflow is handled on the next line */ \\"},
{"lineNum":"  195","line":"    th += (c0 < tl) ? 1 : 0;  /* at most 0xFFFFFFFFFFFFFFFF */ \\"},
{"lineNum":"  196","line":"    c1 += th;                 /* overflow is handled on the next line */ \\"},
{"lineNum":"  197","line":"    c2 += (c1 < th) ? 1 : 0;  /* never overflows by contract (verified in the next line) */ \\"},
{"lineNum":"  198","line":"    VERIFY_CHECK((c1 >= th) || (c2 != 0)); \\"},
{"lineNum":"  199","line":"}"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"/** Add a*b to the number defined by (c0,c1). c1 must never overflow. */"},
{"lineNum":"  202","line":"#define muladd_fast(a,b) { \\"},
{"lineNum":"  203","line":"    uint64_t tl, th; \\"},
{"lineNum":"  204","line":"    { \\"},
{"lineNum":"  205","line":"        uint128_t t = (uint128_t)a * b; \\"},
{"lineNum":"  206","line":"        th = t >> 64;         /* at most 0xFFFFFFFFFFFFFFFE */ \\"},
{"lineNum":"  207","line":"        tl = t; \\"},
{"lineNum":"  208","line":"    } \\"},
{"lineNum":"  209","line":"    c0 += tl;                 /* overflow is handled on the next line */ \\"},
{"lineNum":"  210","line":"    th += (c0 < tl) ? 1 : 0;  /* at most 0xFFFFFFFFFFFFFFFF */ \\"},
{"lineNum":"  211","line":"    c1 += th;                 /* never overflows by contract (verified in the next line) */ \\"},
{"lineNum":"  212","line":"    VERIFY_CHECK(c1 >= th); \\"},
{"lineNum":"  213","line":"}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"/** Add 2*a*b to the number defined by (c0,c1,c2). c2 must never overflow. */"},
{"lineNum":"  216","line":"#define muladd2(a,b) { \\"},
{"lineNum":"  217","line":"    uint64_t tl, th, th2, tl2; \\"},
{"lineNum":"  218","line":"    { \\"},
{"lineNum":"  219","line":"        uint128_t t = (uint128_t)a * b; \\"},
{"lineNum":"  220","line":"        th = t >> 64;               /* at most 0xFFFFFFFFFFFFFFFE */ \\"},
{"lineNum":"  221","line":"        tl = t; \\"},
{"lineNum":"  222","line":"    } \\"},
{"lineNum":"  223","line":"    th2 = th + th;                  /* at most 0xFFFFFFFFFFFFFFFE (in case th was 0x7FFFFFFFFFFFFFFF) */ \\"},
{"lineNum":"  224","line":"    c2 += (th2 < th) ? 1 : 0;       /* never overflows by contract (verified the next line) */ \\"},
{"lineNum":"  225","line":"    VERIFY_CHECK((th2 >= th) || (c2 != 0)); \\"},
{"lineNum":"  226","line":"    tl2 = tl + tl;                  /* at most 0xFFFFFFFFFFFFFFFE (in case the lowest 63 bits of tl were 0x7FFFFFFFFFFFFFFF) */ \\"},
{"lineNum":"  227","line":"    th2 += (tl2 < tl) ? 1 : 0;      /* at most 0xFFFFFFFFFFFFFFFF */ \\"},
{"lineNum":"  228","line":"    c0 += tl2;                      /* overflow is handled on the next line */ \\"},
{"lineNum":"  229","line":"    th2 += (c0 < tl2) ? 1 : 0;      /* second overflow is handled on the next line */ \\"},
{"lineNum":"  230","line":"    c2 += (c0 < tl2) & (th2 == 0);  /* never overflows by contract (verified the next line) */ \\"},
{"lineNum":"  231","line":"    VERIFY_CHECK((c0 >= tl2) || (th2 != 0) || (c2 != 0)); \\"},
{"lineNum":"  232","line":"    c1 += th2;                      /* overflow is handled on the next line */ \\"},
{"lineNum":"  233","line":"    c2 += (c1 < th2) ? 1 : 0;       /* never overflows by contract (verified the next line) */ \\"},
{"lineNum":"  234","line":"    VERIFY_CHECK((c1 >= th2) || (c2 != 0)); \\"},
{"lineNum":"  235","line":"}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"/** Add a to the number defined by (c0,c1,c2). c2 must never overflow. */"},
{"lineNum":"  238","line":"#define sumadd(a) { \\"},
{"lineNum":"  239","line":"    unsigned int over; \\"},
{"lineNum":"  240","line":"    c0 += (a);                  /* overflow is handled on the next line */ \\"},
{"lineNum":"  241","line":"    over = (c0 < (a)) ? 1 : 0; \\"},
{"lineNum":"  242","line":"    c1 += over;                 /* overflow is handled on the next line */ \\"},
{"lineNum":"  243","line":"    c2 += (c1 < over) ? 1 : 0;  /* never overflows by contract */ \\"},
{"lineNum":"  244","line":"}"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"/** Add a to the number defined by (c0,c1). c1 must never overflow, c2 must be zero. */"},
{"lineNum":"  247","line":"#define sumadd_fast(a) { \\"},
{"lineNum":"  248","line":"    c0 += (a);                 /* overflow is handled on the next line */ \\"},
{"lineNum":"  249","line":"    c1 += (c0 < (a)) ? 1 : 0;  /* never overflows by contract (verified the next line) */ \\"},
{"lineNum":"  250","line":"    VERIFY_CHECK((c1 != 0) | (c0 >= (a))); \\"},
{"lineNum":"  251","line":"    VERIFY_CHECK(c2 == 0); \\"},
{"lineNum":"  252","line":"}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"/** Extract the lowest 64 bits of (c0,c1,c2) into n, and left shift the number 64 bits. */"},
{"lineNum":"  255","line":"#define extract(n) { \\"},
{"lineNum":"  256","line":"    (n) = c0; \\"},
{"lineNum":"  257","line":"    c0 = c1; \\"},
{"lineNum":"  258","line":"    c1 = c2; \\"},
{"lineNum":"  259","line":"    c2 = 0; \\"},
{"lineNum":"  260","line":"}"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"/** Extract the lowest 64 bits of (c0,c1,c2) into n, and left shift the number 64 bits. c2 is required to be zero. */"},
{"lineNum":"  263","line":"#define extract_fast(n) { \\"},
{"lineNum":"  264","line":"    (n) = c0; \\"},
{"lineNum":"  265","line":"    c0 = c1; \\"},
{"lineNum":"  266","line":"    c1 = 0; \\"},
{"lineNum":"  267","line":"    VERIFY_CHECK(c2 == 0); \\"},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {","class":"lineCov","hits":"1","order":"4808","possible_hits":"1",},
{"lineNum":"  271","line":"#ifdef USE_ASM_X86_64"},
{"lineNum":"  272","line":"    /* Reduce 512 bits into 385. */"},
{"lineNum":"  273","line":"    uint64_t m0, m1, m2, m3, m4, m5, m6;"},
{"lineNum":"  274","line":"    uint64_t p0, p1, p2, p3, p4;"},
{"lineNum":"  275","line":"    uint64_t c;"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    __asm__ __volatile__("},
{"lineNum":"  278","line":"    /* Preload. */"},
{"lineNum":"  279","line":"    \"movq 32(%%rsi), %%r11\\n\""},
{"lineNum":"  280","line":"    \"movq 40(%%rsi), %%r12\\n\""},
{"lineNum":"  281","line":"    \"movq 48(%%rsi), %%r13\\n\""},
{"lineNum":"  282","line":"    \"movq 56(%%rsi), %%r14\\n\""},
{"lineNum":"  283","line":"    /* Initialize r8,r9,r10 */"},
{"lineNum":"  284","line":"    \"movq 0(%%rsi), %%r8\\n\""},
{"lineNum":"  285","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  286","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  287","line":"    /* (r8,r9) += n0 * c0 */"},
{"lineNum":"  288","line":"    \"movq %8, %%rax\\n\""},
{"lineNum":"  289","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  290","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  291","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  292","line":"    /* extract m0 */"},
{"lineNum":"  293","line":"    \"movq %%r8, %q0\\n\""},
{"lineNum":"  294","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  295","line":"    /* (r9,r10) += l1 */"},
{"lineNum":"  296","line":"    \"addq 8(%%rsi), %%r9\\n\""},
{"lineNum":"  297","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  298","line":"    /* (r9,r10,r8) += n1 * c0 */"},
{"lineNum":"  299","line":"    \"movq %8, %%rax\\n\""},
{"lineNum":"  300","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  301","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  302","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  303","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  304","line":"    /* (r9,r10,r8) += n0 * c1 */"},
{"lineNum":"  305","line":"    \"movq %9, %%rax\\n\""},
{"lineNum":"  306","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  307","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  308","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  309","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  310","line":"    /* extract m1 */"},
{"lineNum":"  311","line":"    \"movq %%r9, %q1\\n\""},
{"lineNum":"  312","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  313","line":"    /* (r10,r8,r9) += l2 */"},
{"lineNum":"  314","line":"    \"addq 16(%%rsi), %%r10\\n\""},
{"lineNum":"  315","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  316","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  317","line":"    /* (r10,r8,r9) += n2 * c0 */"},
{"lineNum":"  318","line":"    \"movq %8, %%rax\\n\""},
{"lineNum":"  319","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  320","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  321","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  322","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  323","line":"    /* (r10,r8,r9) += n1 * c1 */"},
{"lineNum":"  324","line":"    \"movq %9, %%rax\\n\""},
{"lineNum":"  325","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  326","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  327","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  328","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  329","line":"    /* (r10,r8,r9) += n0 */"},
{"lineNum":"  330","line":"    \"addq %%r11, %%r10\\n\""},
{"lineNum":"  331","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  332","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  333","line":"    /* extract m2 */"},
{"lineNum":"  334","line":"    \"movq %%r10, %q2\\n\""},
{"lineNum":"  335","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  336","line":"    /* (r8,r9,r10) += l3 */"},
{"lineNum":"  337","line":"    \"addq 24(%%rsi), %%r8\\n\""},
{"lineNum":"  338","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  339","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  340","line":"    /* (r8,r9,r10) += n3 * c0 */"},
{"lineNum":"  341","line":"    \"movq %8, %%rax\\n\""},
{"lineNum":"  342","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  343","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  344","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  345","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  346","line":"    /* (r8,r9,r10) += n2 * c1 */"},
{"lineNum":"  347","line":"    \"movq %9, %%rax\\n\""},
{"lineNum":"  348","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  349","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  350","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  351","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  352","line":"    /* (r8,r9,r10) += n1 */"},
{"lineNum":"  353","line":"    \"addq %%r12, %%r8\\n\""},
{"lineNum":"  354","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  355","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  356","line":"    /* extract m3 */"},
{"lineNum":"  357","line":"    \"movq %%r8, %q3\\n\""},
{"lineNum":"  358","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  359","line":"    /* (r9,r10,r8) += n3 * c1 */"},
{"lineNum":"  360","line":"    \"movq %9, %%rax\\n\""},
{"lineNum":"  361","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  362","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  363","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  364","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  365","line":"    /* (r9,r10,r8) += n2 */"},
{"lineNum":"  366","line":"    \"addq %%r13, %%r9\\n\""},
{"lineNum":"  367","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  368","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  369","line":"    /* extract m4 */"},
{"lineNum":"  370","line":"    \"movq %%r9, %q4\\n\""},
{"lineNum":"  371","line":"    /* (r10,r8) += n3 */"},
{"lineNum":"  372","line":"    \"addq %%r14, %%r10\\n\""},
{"lineNum":"  373","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  374","line":"    /* extract m5 */"},
{"lineNum":"  375","line":"    \"movq %%r10, %q5\\n\""},
{"lineNum":"  376","line":"    /* extract m6 */"},
{"lineNum":"  377","line":"    \"movq %%r8, %q6\\n\""},
{"lineNum":"  378","line":"    : \"=g\"(m0), \"=g\"(m1), \"=g\"(m2), \"=g\"(m3), \"=g\"(m4), \"=g\"(m5), \"=g\"(m6)"},
{"lineNum":"  379","line":"    : \"S\"(l), \"n\"(SECP256K1_N_C_0), \"n\"(SECP256K1_N_C_1)"},
{"lineNum":"  380","line":"    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"cc\");"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"    /* Reduce 385 bits into 258. */"},
{"lineNum":"  383","line":"    __asm__ __volatile__("},
{"lineNum":"  384","line":"    /* Preload */"},
{"lineNum":"  385","line":"    \"movq %q9, %%r11\\n\""},
{"lineNum":"  386","line":"    \"movq %q10, %%r12\\n\""},
{"lineNum":"  387","line":"    \"movq %q11, %%r13\\n\""},
{"lineNum":"  388","line":"    /* Initialize (r8,r9,r10) */"},
{"lineNum":"  389","line":"    \"movq %q5, %%r8\\n\""},
{"lineNum":"  390","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  391","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  392","line":"    /* (r8,r9) += m4 * c0 */"},
{"lineNum":"  393","line":"    \"movq %12, %%rax\\n\""},
{"lineNum":"  394","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  395","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  396","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  397","line":"    /* extract p0 */"},
{"lineNum":"  398","line":"    \"movq %%r8, %q0\\n\""},
{"lineNum":"  399","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  400","line":"    /* (r9,r10) += m1 */"},
{"lineNum":"  401","line":"    \"addq %q6, %%r9\\n\""},
{"lineNum":"  402","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  403","line":"    /* (r9,r10,r8) += m5 * c0 */"},
{"lineNum":"  404","line":"    \"movq %12, %%rax\\n\""},
{"lineNum":"  405","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  406","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  407","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  408","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  409","line":"    /* (r9,r10,r8) += m4 * c1 */"},
{"lineNum":"  410","line":"    \"movq %13, %%rax\\n\""},
{"lineNum":"  411","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  412","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  413","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  414","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  415","line":"    /* extract p1 */"},
{"lineNum":"  416","line":"    \"movq %%r9, %q1\\n\""},
{"lineNum":"  417","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  418","line":"    /* (r10,r8,r9) += m2 */"},
{"lineNum":"  419","line":"    \"addq %q7, %%r10\\n\""},
{"lineNum":"  420","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  421","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  422","line":"    /* (r10,r8,r9) += m6 * c0 */"},
{"lineNum":"  423","line":"    \"movq %12, %%rax\\n\""},
{"lineNum":"  424","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  425","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  426","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  427","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  428","line":"    /* (r10,r8,r9) += m5 * c1 */"},
{"lineNum":"  429","line":"    \"movq %13, %%rax\\n\""},
{"lineNum":"  430","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  431","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  432","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  433","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  434","line":"    /* (r10,r8,r9) += m4 */"},
{"lineNum":"  435","line":"    \"addq %%r11, %%r10\\n\""},
{"lineNum":"  436","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  437","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  438","line":"    /* extract p2 */"},
{"lineNum":"  439","line":"    \"movq %%r10, %q2\\n\""},
{"lineNum":"  440","line":"    /* (r8,r9) += m3 */"},
{"lineNum":"  441","line":"    \"addq %q8, %%r8\\n\""},
{"lineNum":"  442","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  443","line":"    /* (r8,r9) += m6 * c1 */"},
{"lineNum":"  444","line":"    \"movq %13, %%rax\\n\""},
{"lineNum":"  445","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  446","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  447","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  448","line":"    /* (r8,r9) += m5 */"},
{"lineNum":"  449","line":"    \"addq %%r12, %%r8\\n\""},
{"lineNum":"  450","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  451","line":"    /* extract p3 */"},
{"lineNum":"  452","line":"    \"movq %%r8, %q3\\n\""},
{"lineNum":"  453","line":"    /* (r9) += m6 */"},
{"lineNum":"  454","line":"    \"addq %%r13, %%r9\\n\""},
{"lineNum":"  455","line":"    /* extract p4 */"},
{"lineNum":"  456","line":"    \"movq %%r9, %q4\\n\""},
{"lineNum":"  457","line":"    : \"=&g\"(p0), \"=&g\"(p1), \"=&g\"(p2), \"=g\"(p3), \"=g\"(p4)"},
{"lineNum":"  458","line":"    : \"g\"(m0), \"g\"(m1), \"g\"(m2), \"g\"(m3), \"g\"(m4), \"g\"(m5), \"g\"(m6), \"n\"(SECP256K1_N_C_0), \"n\"(SECP256K1_N_C_1)"},
{"lineNum":"  459","line":"    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"cc\");"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    /* Reduce 258 bits into 256. */"},
{"lineNum":"  462","line":"    __asm__ __volatile__("},
{"lineNum":"  463","line":"    /* Preload */"},
{"lineNum":"  464","line":"    \"movq %q5, %%r10\\n\""},
{"lineNum":"  465","line":"    /* (rax,rdx) = p4 * c0 */"},
{"lineNum":"  466","line":"    \"movq %7, %%rax\\n\""},
{"lineNum":"  467","line":"    \"mulq %%r10\\n\""},
{"lineNum":"  468","line":"    /* (rax,rdx) += p0 */"},
{"lineNum":"  469","line":"    \"addq %q1, %%rax\\n\""},
{"lineNum":"  470","line":"    \"adcq $0, %%rdx\\n\""},
{"lineNum":"  471","line":"    /* extract r0 */"},
{"lineNum":"  472","line":"    \"movq %%rax, 0(%q6)\\n\""},
{"lineNum":"  473","line":"    /* Move to (r8,r9) */"},
{"lineNum":"  474","line":"    \"movq %%rdx, %%r8\\n\""},
{"lineNum":"  475","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  476","line":"    /* (r8,r9) += p1 */"},
{"lineNum":"  477","line":"    \"addq %q2, %%r8\\n\""},
{"lineNum":"  478","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  479","line":"    /* (r8,r9) += p4 * c1 */"},
{"lineNum":"  480","line":"    \"movq %8, %%rax\\n\""},
{"lineNum":"  481","line":"    \"mulq %%r10\\n\""},
{"lineNum":"  482","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  483","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  484","line":"    /* Extract r1 */"},
{"lineNum":"  485","line":"    \"movq %%r8, 8(%q6)\\n\""},
{"lineNum":"  486","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  487","line":"    /* (r9,r8) += p4 */"},
{"lineNum":"  488","line":"    \"addq %%r10, %%r9\\n\""},
{"lineNum":"  489","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  490","line":"    /* (r9,r8) += p2 */"},
{"lineNum":"  491","line":"    \"addq %q3, %%r9\\n\""},
{"lineNum":"  492","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  493","line":"    /* Extract r2 */"},
{"lineNum":"  494","line":"    \"movq %%r9, 16(%q6)\\n\""},
{"lineNum":"  495","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  496","line":"    /* (r8,r9) += p3 */"},
{"lineNum":"  497","line":"    \"addq %q4, %%r8\\n\""},
{"lineNum":"  498","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  499","line":"    /* Extract r3 */"},
{"lineNum":"  500","line":"    \"movq %%r8, 24(%q6)\\n\""},
{"lineNum":"  501","line":"    /* Extract c */"},
{"lineNum":"  502","line":"    \"movq %%r9, %q0\\n\""},
{"lineNum":"  503","line":"    : \"=g\"(c)"},
{"lineNum":"  504","line":"    : \"g\"(p0), \"g\"(p1), \"g\"(p2), \"g\"(p3), \"g\"(p4), \"D\"(r), \"n\"(SECP256K1_N_C_0), \"n\"(SECP256K1_N_C_1)"},
{"lineNum":"  505","line":"    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"cc\", \"memory\");"},
{"lineNum":"  506","line":"#else"},
{"lineNum":"  507","line":"    uint128_t c;"},
{"lineNum":"  508","line":"    uint64_t c0, c1, c2;"},
{"lineNum":"  509","line":"    uint64_t n0 = l[4], n1 = l[5], n2 = l[6], n3 = l[7];","class":"lineCov","hits":"1","order":"4809","possible_hits":"1",},
{"lineNum":"  510","line":"    uint64_t m0, m1, m2, m3, m4, m5;"},
{"lineNum":"  511","line":"    uint32_t m6;"},
{"lineNum":"  512","line":"    uint64_t p0, p1, p2, p3;"},
{"lineNum":"  513","line":"    uint32_t p4;"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"    /* Reduce 512 bits into 385. */"},
{"lineNum":"  516","line":"    /* m[0..6] = l[0..3] + n[0..3] * SECP256K1_N_C. */"},
{"lineNum":"  517","line":"    c0 = l[0]; c1 = 0; c2 = 0;","class":"lineCov","hits":"1","order":"4810","possible_hits":"1",},
{"lineNum":"  518","line":"    muladd_fast(n0, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4811","possible_hits":"1",},
{"lineNum":"  519","line":"    extract_fast(m0);","class":"lineCov","hits":"1","order":"4812","possible_hits":"1",},
{"lineNum":"  520","line":"    sumadd_fast(l[1]);","class":"lineCov","hits":"1","order":"4813","possible_hits":"1",},
{"lineNum":"  521","line":"    muladd(n1, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4814","possible_hits":"1",},
{"lineNum":"  522","line":"    muladd(n0, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4815","possible_hits":"1",},
{"lineNum":"  523","line":"    extract(m1);","class":"lineCov","hits":"1","order":"4816","possible_hits":"1",},
{"lineNum":"  524","line":"    sumadd(l[2]);","class":"lineCov","hits":"1","order":"4817","possible_hits":"1",},
{"lineNum":"  525","line":"    muladd(n2, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4818","possible_hits":"1",},
{"lineNum":"  526","line":"    muladd(n1, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4819","possible_hits":"1",},
{"lineNum":"  527","line":"    sumadd(n0);","class":"lineCov","hits":"1","order":"4820","possible_hits":"1",},
{"lineNum":"  528","line":"    extract(m2);","class":"lineCov","hits":"1","order":"4821","possible_hits":"1",},
{"lineNum":"  529","line":"    sumadd(l[3]);","class":"lineCov","hits":"1","order":"4822","possible_hits":"1",},
{"lineNum":"  530","line":"    muladd(n3, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4823","possible_hits":"1",},
{"lineNum":"  531","line":"    muladd(n2, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4824","possible_hits":"1",},
{"lineNum":"  532","line":"    sumadd(n1);","class":"lineCov","hits":"1","order":"4825","possible_hits":"1",},
{"lineNum":"  533","line":"    extract(m3);","class":"lineCov","hits":"1","order":"4826","possible_hits":"1",},
{"lineNum":"  534","line":"    muladd(n3, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4827","possible_hits":"1",},
{"lineNum":"  535","line":"    sumadd(n2);","class":"lineCov","hits":"1","order":"4828","possible_hits":"1",},
{"lineNum":"  536","line":"    extract(m4);","class":"lineCov","hits":"1","order":"4829","possible_hits":"1",},
{"lineNum":"  537","line":"    sumadd_fast(n3);","class":"lineCov","hits":"1","order":"4830","possible_hits":"1",},
{"lineNum":"  538","line":"    extract_fast(m5);","class":"lineCov","hits":"1","order":"4831","possible_hits":"1",},
{"lineNum":"  539","line":"    VERIFY_CHECK(c0 <= 1);"},
{"lineNum":"  540","line":"    m6 = c0;","class":"lineCov","hits":"1","order":"4832","possible_hits":"1",},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    /* Reduce 385 bits into 258. */"},
{"lineNum":"  543","line":"    /* p[0..4] = m[0..3] + m[4..6] * SECP256K1_N_C. */"},
{"lineNum":"  544","line":"    c0 = m0; c1 = 0; c2 = 0;","class":"lineCov","hits":"1","order":"4833","possible_hits":"1",},
{"lineNum":"  545","line":"    muladd_fast(m4, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4834","possible_hits":"1",},
{"lineNum":"  546","line":"    extract_fast(p0);","class":"lineCov","hits":"1","order":"4835","possible_hits":"1",},
{"lineNum":"  547","line":"    sumadd_fast(m1);","class":"lineCov","hits":"1","order":"4836","possible_hits":"1",},
{"lineNum":"  548","line":"    muladd(m5, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4837","possible_hits":"1",},
{"lineNum":"  549","line":"    muladd(m4, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4838","possible_hits":"1",},
{"lineNum":"  550","line":"    extract(p1);","class":"lineCov","hits":"1","order":"4839","possible_hits":"1",},
{"lineNum":"  551","line":"    sumadd(m2);","class":"lineCov","hits":"1","order":"4840","possible_hits":"1",},
{"lineNum":"  552","line":"    muladd(m6, SECP256K1_N_C_0);","class":"lineCov","hits":"1","order":"4841","possible_hits":"1",},
{"lineNum":"  553","line":"    muladd(m5, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4842","possible_hits":"1",},
{"lineNum":"  554","line":"    sumadd(m4);","class":"lineCov","hits":"1","order":"4843","possible_hits":"1",},
{"lineNum":"  555","line":"    extract(p2);","class":"lineCov","hits":"1","order":"4844","possible_hits":"1",},
{"lineNum":"  556","line":"    sumadd_fast(m3);","class":"lineCov","hits":"1","order":"4845","possible_hits":"1",},
{"lineNum":"  557","line":"    muladd_fast(m6, SECP256K1_N_C_1);","class":"lineCov","hits":"1","order":"4846","possible_hits":"1",},
{"lineNum":"  558","line":"    sumadd_fast(m5);","class":"lineCov","hits":"1","order":"4847","possible_hits":"1",},
{"lineNum":"  559","line":"    extract_fast(p3);","class":"lineCov","hits":"1","order":"4848","possible_hits":"1",},
{"lineNum":"  560","line":"    p4 = c0 + m6;","class":"lineCov","hits":"1","order":"4849","possible_hits":"1",},
{"lineNum":"  561","line":"    VERIFY_CHECK(p4 <= 2);"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    /* Reduce 258 bits into 256. */"},
{"lineNum":"  564","line":"    /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */"},
{"lineNum":"  565","line":"    c = p0 + (uint128_t)SECP256K1_N_C_0 * p4;","class":"lineCov","hits":"1","order":"4850","possible_hits":"1",},
{"lineNum":"  566","line":"    r->d[0] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;","class":"lineCov","hits":"1","order":"4851","possible_hits":"1",},
{"lineNum":"  567","line":"    c += p1 + (uint128_t)SECP256K1_N_C_1 * p4;","class":"lineCov","hits":"1","order":"4852","possible_hits":"1",},
{"lineNum":"  568","line":"    r->d[1] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;","class":"lineCov","hits":"1","order":"4853","possible_hits":"1",},
{"lineNum":"  569","line":"    c += p2 + (uint128_t)p4;","class":"lineCov","hits":"1","order":"4854","possible_hits":"1",},
{"lineNum":"  570","line":"    r->d[2] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;","class":"lineCov","hits":"1","order":"4855","possible_hits":"1",},
{"lineNum":"  571","line":"    c += p3;","class":"lineCov","hits":"1","order":"4856","possible_hits":"1",},
{"lineNum":"  572","line":"    r->d[3] = c & 0xFFFFFFFFFFFFFFFFULL; c >>= 64;","class":"lineCov","hits":"1","order":"4857","possible_hits":"1",},
{"lineNum":"  573","line":"#endif"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"    /* Final reduction of r. */"},
{"lineNum":"  576","line":"    secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));","class":"lineCov","hits":"1","order":"4858","possible_hits":"1",},
{"lineNum":"  577","line":"}","class":"linePartCov","hits":"1","order":"4859","possible_hits":"2",},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar *a, const secp256k1_scalar *b) {","class":"lineCov","hits":"1","order":"4864","possible_hits":"1",},
{"lineNum":"  580","line":"#ifdef USE_ASM_X86_64"},
{"lineNum":"  581","line":"    const uint64_t *pb = b->d;"},
{"lineNum":"  582","line":"    __asm__ __volatile__("},
{"lineNum":"  583","line":"    /* Preload */"},
{"lineNum":"  584","line":"    \"movq 0(%%rdi), %%r15\\n\""},
{"lineNum":"  585","line":"    \"movq 8(%%rdi), %%rbx\\n\""},
{"lineNum":"  586","line":"    \"movq 16(%%rdi), %%rcx\\n\""},
{"lineNum":"  587","line":"    \"movq 0(%%rdx), %%r11\\n\""},
{"lineNum":"  588","line":"    \"movq 8(%%rdx), %%r12\\n\""},
{"lineNum":"  589","line":"    \"movq 16(%%rdx), %%r13\\n\""},
{"lineNum":"  590","line":"    \"movq 24(%%rdx), %%r14\\n\""},
{"lineNum":"  591","line":"    /* (rax,rdx) = a0 * b0 */"},
{"lineNum":"  592","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  593","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  594","line":"    /* Extract l0 */"},
{"lineNum":"  595","line":"    \"movq %%rax, 0(%%rsi)\\n\""},
{"lineNum":"  596","line":"    /* (r8,r9,r10) = (rdx) */"},
{"lineNum":"  597","line":"    \"movq %%rdx, %%r8\\n\""},
{"lineNum":"  598","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  599","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  600","line":"    /* (r8,r9,r10) += a0 * b1 */"},
{"lineNum":"  601","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  602","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  603","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  604","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  605","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  606","line":"    /* (r8,r9,r10) += a1 * b0 */"},
{"lineNum":"  607","line":"    \"movq %%rbx, %%rax\\n\""},
{"lineNum":"  608","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  609","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  610","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  611","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  612","line":"    /* Extract l1 */"},
{"lineNum":"  613","line":"    \"movq %%r8, 8(%%rsi)\\n\""},
{"lineNum":"  614","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  615","line":"    /* (r9,r10,r8) += a0 * b2 */"},
{"lineNum":"  616","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  617","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  618","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  619","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  620","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  621","line":"    /* (r9,r10,r8) += a1 * b1 */"},
{"lineNum":"  622","line":"    \"movq %%rbx, %%rax\\n\""},
{"lineNum":"  623","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  624","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  625","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  626","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  627","line":"    /* (r9,r10,r8) += a2 * b0 */"},
{"lineNum":"  628","line":"    \"movq %%rcx, %%rax\\n\""},
{"lineNum":"  629","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  630","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  631","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  632","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  633","line":"    /* Extract l2 */"},
{"lineNum":"  634","line":"    \"movq %%r9, 16(%%rsi)\\n\""},
{"lineNum":"  635","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  636","line":"    /* (r10,r8,r9) += a0 * b3 */"},
{"lineNum":"  637","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  638","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  639","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  640","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  641","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  642","line":"    /* Preload a3 */"},
{"lineNum":"  643","line":"    \"movq 24(%%rdi), %%r15\\n\""},
{"lineNum":"  644","line":"    /* (r10,r8,r9) += a1 * b2 */"},
{"lineNum":"  645","line":"    \"movq %%rbx, %%rax\\n\""},
{"lineNum":"  646","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  647","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  648","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  649","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  650","line":"    /* (r10,r8,r9) += a2 * b1 */"},
{"lineNum":"  651","line":"    \"movq %%rcx, %%rax\\n\""},
{"lineNum":"  652","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  653","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  654","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  655","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  656","line":"    /* (r10,r8,r9) += a3 * b0 */"},
{"lineNum":"  657","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  658","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  659","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  660","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  661","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  662","line":"    /* Extract l3 */"},
{"lineNum":"  663","line":"    \"movq %%r10, 24(%%rsi)\\n\""},
{"lineNum":"  664","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  665","line":"    /* (r8,r9,r10) += a1 * b3 */"},
{"lineNum":"  666","line":"    \"movq %%rbx, %%rax\\n\""},
{"lineNum":"  667","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  668","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  669","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  670","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  671","line":"    /* (r8,r9,r10) += a2 * b2 */"},
{"lineNum":"  672","line":"    \"movq %%rcx, %%rax\\n\""},
{"lineNum":"  673","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  674","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  675","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  676","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  677","line":"    /* (r8,r9,r10) += a3 * b1 */"},
{"lineNum":"  678","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  679","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  680","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  681","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  682","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  683","line":"    /* Extract l4 */"},
{"lineNum":"  684","line":"    \"movq %%r8, 32(%%rsi)\\n\""},
{"lineNum":"  685","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  686","line":"    /* (r9,r10,r8) += a2 * b3 */"},
{"lineNum":"  687","line":"    \"movq %%rcx, %%rax\\n\""},
{"lineNum":"  688","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  689","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  690","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  691","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  692","line":"    /* (r9,r10,r8) += a3 * b2 */"},
{"lineNum":"  693","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  694","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  695","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  696","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  697","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  698","line":"    /* Extract l5 */"},
{"lineNum":"  699","line":"    \"movq %%r9, 40(%%rsi)\\n\""},
{"lineNum":"  700","line":"    /* (r10,r8) += a3 * b3 */"},
{"lineNum":"  701","line":"    \"movq %%r15, %%rax\\n\""},
{"lineNum":"  702","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  703","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  704","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  705","line":"    /* Extract l6 */"},
{"lineNum":"  706","line":"    \"movq %%r10, 48(%%rsi)\\n\""},
{"lineNum":"  707","line":"    /* Extract l7 */"},
{"lineNum":"  708","line":"    \"movq %%r8, 56(%%rsi)\\n\""},
{"lineNum":"  709","line":"    : \"+d\"(pb)"},
{"lineNum":"  710","line":"    : \"S\"(l), \"D\"(a->d)"},
{"lineNum":"  711","line":"    : \"rax\", \"rbx\", \"rcx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\", \"cc\", \"memory\");"},
{"lineNum":"  712","line":"#else"},
{"lineNum":"  713","line":"    /* 160 bit accumulator. */"},
{"lineNum":"  714","line":"    uint64_t c0 = 0, c1 = 0;","class":"lineCov","hits":"1","order":"4865","possible_hits":"1",},
{"lineNum":"  715","line":"    uint32_t c2 = 0;","class":"lineCov","hits":"1","order":"4866","possible_hits":"1",},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    /* l[0..7] = a[0..3] * b[0..3]. */"},
{"lineNum":"  718","line":"    muladd_fast(a->d[0], b->d[0]);","class":"lineCov","hits":"1","order":"4867","possible_hits":"1",},
{"lineNum":"  719","line":"    extract_fast(l[0]);","class":"lineCov","hits":"1","order":"4868","possible_hits":"1",},
{"lineNum":"  720","line":"    muladd(a->d[0], b->d[1]);","class":"lineCov","hits":"1","order":"4869","possible_hits":"1",},
{"lineNum":"  721","line":"    muladd(a->d[1], b->d[0]);","class":"lineCov","hits":"1","order":"4870","possible_hits":"1",},
{"lineNum":"  722","line":"    extract(l[1]);","class":"lineCov","hits":"1","order":"4871","possible_hits":"1",},
{"lineNum":"  723","line":"    muladd(a->d[0], b->d[2]);","class":"lineCov","hits":"1","order":"4872","possible_hits":"1",},
{"lineNum":"  724","line":"    muladd(a->d[1], b->d[1]);","class":"lineCov","hits":"1","order":"4873","possible_hits":"1",},
{"lineNum":"  725","line":"    muladd(a->d[2], b->d[0]);","class":"lineCov","hits":"1","order":"4874","possible_hits":"1",},
{"lineNum":"  726","line":"    extract(l[2]);","class":"lineCov","hits":"1","order":"4875","possible_hits":"1",},
{"lineNum":"  727","line":"    muladd(a->d[0], b->d[3]);","class":"lineCov","hits":"1","order":"4876","possible_hits":"1",},
{"lineNum":"  728","line":"    muladd(a->d[1], b->d[2]);","class":"lineCov","hits":"1","order":"4877","possible_hits":"1",},
{"lineNum":"  729","line":"    muladd(a->d[2], b->d[1]);","class":"lineCov","hits":"1","order":"4878","possible_hits":"1",},
{"lineNum":"  730","line":"    muladd(a->d[3], b->d[0]);","class":"lineCov","hits":"1","order":"4879","possible_hits":"1",},
{"lineNum":"  731","line":"    extract(l[3]);","class":"lineCov","hits":"1","order":"4880","possible_hits":"1",},
{"lineNum":"  732","line":"    muladd(a->d[1], b->d[3]);","class":"lineCov","hits":"1","order":"4881","possible_hits":"1",},
{"lineNum":"  733","line":"    muladd(a->d[2], b->d[2]);","class":"lineCov","hits":"1","order":"4882","possible_hits":"1",},
{"lineNum":"  734","line":"    muladd(a->d[3], b->d[1]);","class":"lineCov","hits":"1","order":"4883","possible_hits":"1",},
{"lineNum":"  735","line":"    extract(l[4]);","class":"lineCov","hits":"1","order":"4884","possible_hits":"1",},
{"lineNum":"  736","line":"    muladd(a->d[2], b->d[3]);","class":"lineCov","hits":"1","order":"4885","possible_hits":"1",},
{"lineNum":"  737","line":"    muladd(a->d[3], b->d[2]);","class":"lineCov","hits":"1","order":"4886","possible_hits":"1",},
{"lineNum":"  738","line":"    extract(l[5]);","class":"lineCov","hits":"1","order":"4887","possible_hits":"1",},
{"lineNum":"  739","line":"    muladd_fast(a->d[3], b->d[3]);","class":"lineCov","hits":"1","order":"4888","possible_hits":"1",},
{"lineNum":"  740","line":"    extract_fast(l[6]);","class":"lineCov","hits":"1","order":"4889","possible_hits":"1",},
{"lineNum":"  741","line":"    VERIFY_CHECK(c1 == 0);"},
{"lineNum":"  742","line":"    l[7] = c0;","class":"lineCov","hits":"1","order":"4890","possible_hits":"1",},
{"lineNum":"  743","line":"#endif"},
{"lineNum":"  744","line":"}","class":"linePartCov","hits":"1","order":"4891","possible_hits":"2",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"4785","possible_hits":"1",},
{"lineNum":"  747","line":"#ifdef USE_ASM_X86_64"},
{"lineNum":"  748","line":"    __asm__ __volatile__("},
{"lineNum":"  749","line":"    /* Preload */"},
{"lineNum":"  750","line":"    \"movq 0(%%rdi), %%r11\\n\""},
{"lineNum":"  751","line":"    \"movq 8(%%rdi), %%r12\\n\""},
{"lineNum":"  752","line":"    \"movq 16(%%rdi), %%r13\\n\""},
{"lineNum":"  753","line":"    \"movq 24(%%rdi), %%r14\\n\""},
{"lineNum":"  754","line":"    /* (rax,rdx) = a0 * a0 */"},
{"lineNum":"  755","line":"    \"movq %%r11, %%rax\\n\""},
{"lineNum":"  756","line":"    \"mulq %%r11\\n\""},
{"lineNum":"  757","line":"    /* Extract l0 */"},
{"lineNum":"  758","line":"    \"movq %%rax, 0(%%rsi)\\n\""},
{"lineNum":"  759","line":"    /* (r8,r9,r10) = (rdx,0) */"},
{"lineNum":"  760","line":"    \"movq %%rdx, %%r8\\n\""},
{"lineNum":"  761","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  762","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  763","line":"    /* (r8,r9,r10) += 2 * a0 * a1 */"},
{"lineNum":"  764","line":"    \"movq %%r11, %%rax\\n\""},
{"lineNum":"  765","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  766","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  767","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  768","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  769","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  770","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  771","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  772","line":"    /* Extract l1 */"},
{"lineNum":"  773","line":"    \"movq %%r8, 8(%%rsi)\\n\""},
{"lineNum":"  774","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  775","line":"    /* (r9,r10,r8) += 2 * a0 * a2 */"},
{"lineNum":"  776","line":"    \"movq %%r11, %%rax\\n\""},
{"lineNum":"  777","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  778","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  779","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  780","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  781","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  782","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  783","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  784","line":"    /* (r9,r10,r8) += a1 * a1 */"},
{"lineNum":"  785","line":"    \"movq %%r12, %%rax\\n\""},
{"lineNum":"  786","line":"    \"mulq %%r12\\n\""},
{"lineNum":"  787","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  788","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  789","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  790","line":"    /* Extract l2 */"},
{"lineNum":"  791","line":"    \"movq %%r9, 16(%%rsi)\\n\""},
{"lineNum":"  792","line":"    \"xorq %%r9, %%r9\\n\""},
{"lineNum":"  793","line":"    /* (r10,r8,r9) += 2 * a0 * a3 */"},
{"lineNum":"  794","line":"    \"movq %%r11, %%rax\\n\""},
{"lineNum":"  795","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  796","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  797","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  798","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  799","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  800","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  801","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  802","line":"    /* (r10,r8,r9) += 2 * a1 * a2 */"},
{"lineNum":"  803","line":"    \"movq %%r12, %%rax\\n\""},
{"lineNum":"  804","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  805","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  806","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  807","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  808","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  809","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  810","line":"    \"adcq $0, %%r9\\n\""},
{"lineNum":"  811","line":"    /* Extract l3 */"},
{"lineNum":"  812","line":"    \"movq %%r10, 24(%%rsi)\\n\""},
{"lineNum":"  813","line":"    \"xorq %%r10, %%r10\\n\""},
{"lineNum":"  814","line":"    /* (r8,r9,r10) += 2 * a1 * a3 */"},
{"lineNum":"  815","line":"    \"movq %%r12, %%rax\\n\""},
{"lineNum":"  816","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  817","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  818","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  819","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  820","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  821","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  822","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  823","line":"    /* (r8,r9,r10) += a2 * a2 */"},
{"lineNum":"  824","line":"    \"movq %%r13, %%rax\\n\""},
{"lineNum":"  825","line":"    \"mulq %%r13\\n\""},
{"lineNum":"  826","line":"    \"addq %%rax, %%r8\\n\""},
{"lineNum":"  827","line":"    \"adcq %%rdx, %%r9\\n\""},
{"lineNum":"  828","line":"    \"adcq $0, %%r10\\n\""},
{"lineNum":"  829","line":"    /* Extract l4 */"},
{"lineNum":"  830","line":"    \"movq %%r8, 32(%%rsi)\\n\""},
{"lineNum":"  831","line":"    \"xorq %%r8, %%r8\\n\""},
{"lineNum":"  832","line":"    /* (r9,r10,r8) += 2 * a2 * a3 */"},
{"lineNum":"  833","line":"    \"movq %%r13, %%rax\\n\""},
{"lineNum":"  834","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  835","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  836","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  837","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  838","line":"    \"addq %%rax, %%r9\\n\""},
{"lineNum":"  839","line":"    \"adcq %%rdx, %%r10\\n\""},
{"lineNum":"  840","line":"    \"adcq $0, %%r8\\n\""},
{"lineNum":"  841","line":"    /* Extract l5 */"},
{"lineNum":"  842","line":"    \"movq %%r9, 40(%%rsi)\\n\""},
{"lineNum":"  843","line":"    /* (r10,r8) += a3 * a3 */"},
{"lineNum":"  844","line":"    \"movq %%r14, %%rax\\n\""},
{"lineNum":"  845","line":"    \"mulq %%r14\\n\""},
{"lineNum":"  846","line":"    \"addq %%rax, %%r10\\n\""},
{"lineNum":"  847","line":"    \"adcq %%rdx, %%r8\\n\""},
{"lineNum":"  848","line":"    /* Extract l6 */"},
{"lineNum":"  849","line":"    \"movq %%r10, 48(%%rsi)\\n\""},
{"lineNum":"  850","line":"    /* Extract l7 */"},
{"lineNum":"  851","line":"    \"movq %%r8, 56(%%rsi)\\n\""},
{"lineNum":"  852","line":"    :"},
{"lineNum":"  853","line":"    : \"S\"(l), \"D\"(a->d)"},
{"lineNum":"  854","line":"    : \"rax\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"cc\", \"memory\");"},
{"lineNum":"  855","line":"#else"},
{"lineNum":"  856","line":"    /* 160 bit accumulator. */"},
{"lineNum":"  857","line":"    uint64_t c0 = 0, c1 = 0;","class":"lineCov","hits":"1","order":"4786","possible_hits":"1",},
{"lineNum":"  858","line":"    uint32_t c2 = 0;","class":"lineCov","hits":"1","order":"4787","possible_hits":"1",},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"    /* l[0..7] = a[0..3] * b[0..3]. */"},
{"lineNum":"  861","line":"    muladd_fast(a->d[0], a->d[0]);","class":"lineCov","hits":"1","order":"4788","possible_hits":"1",},
{"lineNum":"  862","line":"    extract_fast(l[0]);","class":"lineCov","hits":"1","order":"4789","possible_hits":"1",},
{"lineNum":"  863","line":"    muladd2(a->d[0], a->d[1]);","class":"lineCov","hits":"1","order":"4790","possible_hits":"1",},
{"lineNum":"  864","line":"    extract(l[1]);","class":"lineCov","hits":"1","order":"4791","possible_hits":"1",},
{"lineNum":"  865","line":"    muladd2(a->d[0], a->d[2]);","class":"lineCov","hits":"1","order":"4792","possible_hits":"1",},
{"lineNum":"  866","line":"    muladd(a->d[1], a->d[1]);","class":"lineCov","hits":"1","order":"4793","possible_hits":"1",},
{"lineNum":"  867","line":"    extract(l[2]);","class":"lineCov","hits":"1","order":"4794","possible_hits":"1",},
{"lineNum":"  868","line":"    muladd2(a->d[0], a->d[3]);","class":"lineCov","hits":"1","order":"4795","possible_hits":"1",},
{"lineNum":"  869","line":"    muladd2(a->d[1], a->d[2]);","class":"lineCov","hits":"1","order":"4796","possible_hits":"1",},
{"lineNum":"  870","line":"    extract(l[3]);","class":"lineCov","hits":"1","order":"4797","possible_hits":"1",},
{"lineNum":"  871","line":"    muladd2(a->d[1], a->d[3]);","class":"lineCov","hits":"1","order":"4798","possible_hits":"1",},
{"lineNum":"  872","line":"    muladd(a->d[2], a->d[2]);","class":"lineCov","hits":"1","order":"4799","possible_hits":"1",},
{"lineNum":"  873","line":"    extract(l[4]);","class":"lineCov","hits":"1","order":"4800","possible_hits":"1",},
{"lineNum":"  874","line":"    muladd2(a->d[2], a->d[3]);","class":"lineCov","hits":"1","order":"4801","possible_hits":"1",},
{"lineNum":"  875","line":"    extract(l[5]);","class":"lineCov","hits":"1","order":"4802","possible_hits":"1",},
{"lineNum":"  876","line":"    muladd_fast(a->d[3], a->d[3]);","class":"lineCov","hits":"1","order":"4803","possible_hits":"1",},
{"lineNum":"  877","line":"    extract_fast(l[6]);","class":"lineCov","hits":"1","order":"4804","possible_hits":"1",},
{"lineNum":"  878","line":"    VERIFY_CHECK(c1 == 0);"},
{"lineNum":"  879","line":"    l[7] = c0;","class":"lineCov","hits":"1","order":"4805","possible_hits":"1",},
{"lineNum":"  880","line":"#endif"},
{"lineNum":"  881","line":"}","class":"linePartCov","hits":"1","order":"4806","possible_hits":"2",},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"#undef sumadd"},
{"lineNum":"  884","line":"#undef sumadd_fast"},
{"lineNum":"  885","line":"#undef muladd"},
{"lineNum":"  886","line":"#undef muladd_fast"},
{"lineNum":"  887","line":"#undef muladd2"},
{"lineNum":"  888","line":"#undef extract"},
{"lineNum":"  889","line":"#undef extract_fast"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {","class":"lineCov","hits":"1","order":"4862","possible_hits":"1",},
{"lineNum":"  892","line":"    uint64_t l[8];"},
{"lineNum":"  893","line":"    secp256k1_scalar_mul_512(l, a, b);","class":"lineCov","hits":"1","order":"4863","possible_hits":"1",},
{"lineNum":"  894","line":"    secp256k1_scalar_reduce_512(r, l);","class":"lineCov","hits":"1","order":"4892","possible_hits":"1",},
{"lineNum":"  895","line":"}","class":"linePartCov","hits":"1","order":"4893","possible_hits":"2",},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {"},
{"lineNum":"  898","line":"    int ret;"},
{"lineNum":"  899","line":"    VERIFY_CHECK(n > 0);"},
{"lineNum":"  900","line":"    VERIFY_CHECK(n < 16);"},
{"lineNum":"  901","line":"    ret = r->d[0] & ((1 << n) - 1);"},
{"lineNum":"  902","line":"    r->d[0] = (r->d[0] >> n) + (r->d[1] << (64 - n));"},
{"lineNum":"  903","line":"    r->d[1] = (r->d[1] >> n) + (r->d[2] << (64 - n));"},
{"lineNum":"  904","line":"    r->d[2] = (r->d[2] >> n) + (r->d[3] << (64 - n));"},
{"lineNum":"  905","line":"    r->d[3] = (r->d[3] >> n);"},
{"lineNum":"  906","line":"    return ret;"},
{"lineNum":"  907","line":"}"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"4783","possible_hits":"1",},
{"lineNum":"  910","line":"    uint64_t l[8];"},
{"lineNum":"  911","line":"    secp256k1_scalar_sqr_512(l, a);","class":"lineCov","hits":"1","order":"4784","possible_hits":"1",},
{"lineNum":"  912","line":"    secp256k1_scalar_reduce_512(r, l);","class":"lineCov","hits":"1","order":"4807","possible_hits":"1",},
{"lineNum":"  913","line":"}","class":"linePartCov","hits":"1","order":"4860","possible_hits":"2",},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  916","line":"static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {","class":"lineCov","hits":"1","order":"5120","possible_hits":"1",},
{"lineNum":"  917","line":"    r1->d[0] = a->d[0];","class":"lineCov","hits":"1","order":"5121","possible_hits":"1",},
{"lineNum":"  918","line":"    r1->d[1] = a->d[1];","class":"lineCov","hits":"1","order":"5122","possible_hits":"1",},
{"lineNum":"  919","line":"    r1->d[2] = 0;","class":"lineCov","hits":"1","order":"5123","possible_hits":"1",},
{"lineNum":"  920","line":"    r1->d[3] = 0;","class":"lineCov","hits":"1","order":"5124","possible_hits":"1",},
{"lineNum":"  921","line":"    r2->d[0] = a->d[2];","class":"lineCov","hits":"1","order":"5125","possible_hits":"1",},
{"lineNum":"  922","line":"    r2->d[1] = a->d[3];","class":"lineCov","hits":"1","order":"5126","possible_hits":"1",},
{"lineNum":"  923","line":"    r2->d[2] = 0;","class":"lineCov","hits":"1","order":"5127","possible_hits":"1",},
{"lineNum":"  924","line":"    r2->d[3] = 0;","class":"lineCov","hits":"1","order":"5128","possible_hits":"1",},
{"lineNum":"  925","line":"}","class":"linePartCov","hits":"1","order":"5129","possible_hits":"2",},
{"lineNum":"  926","line":"#endif"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {"},
{"lineNum":"  929","line":"    return ((a->d[0] ^ b->d[0]) | (a->d[1] ^ b->d[1]) | (a->d[2] ^ b->d[2]) | (a->d[3] ^ b->d[3])) == 0;"},
{"lineNum":"  930","line":"}"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {","class":"lineCov","hits":"1","order":"5025","possible_hits":"1",},
{"lineNum":"  933","line":"    uint64_t l[8];"},
{"lineNum":"  934","line":"    unsigned int shiftlimbs;"},
{"lineNum":"  935","line":"    unsigned int shiftlow;"},
{"lineNum":"  936","line":"    unsigned int shifthigh;"},
{"lineNum":"  937","line":"    VERIFY_CHECK(shift >= 256);"},
{"lineNum":"  938","line":"    secp256k1_scalar_mul_512(l, a, b);","class":"lineCov","hits":"1","order":"5026","possible_hits":"1",},
{"lineNum":"  939","line":"    shiftlimbs = shift >> 6;","class":"lineCov","hits":"1","order":"5027","possible_hits":"1",},
{"lineNum":"  940","line":"    shiftlow = shift & 0x3F;","class":"lineCov","hits":"1","order":"5028","possible_hits":"1",},
{"lineNum":"  941","line":"    shifthigh = 64 - shiftlow;","class":"lineCov","hits":"1","order":"5029","possible_hits":"1",},
{"lineNum":"  942","line":"    r->d[0] = shift < 512 ? (l[0 + shiftlimbs] >> shiftlow | (shift < 448 && shiftlow ? (l[1 + shiftlimbs] << shifthigh) : 0)) : 0;","class":"lineCov","hits":"1","order":"5030","possible_hits":"1",},
{"lineNum":"  943","line":"    r->d[1] = shift < 448 ? (l[1 + shiftlimbs] >> shiftlow | (shift < 384 && shiftlow ? (l[2 + shiftlimbs] << shifthigh) : 0)) : 0;","class":"lineCov","hits":"1","order":"5031","possible_hits":"1",},
{"lineNum":"  944","line":"    r->d[2] = shift < 384 ? (l[2 + shiftlimbs] >> shiftlow | (shift < 320 && shiftlow ? (l[3 + shiftlimbs] << shifthigh) : 0)) : 0;","class":"lineCov","hits":"1","order":"5032","possible_hits":"1",},
{"lineNum":"  945","line":"    r->d[3] = shift < 320 ? (l[3 + shiftlimbs] >> shiftlow) : 0;","class":"lineCov","hits":"1","order":"5033","possible_hits":"1",},
{"lineNum":"  946","line":"    secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1);","class":"lineCov","hits":"1","order":"5034","possible_hits":"1",},
{"lineNum":"  947","line":"}","class":"linePartCov","hits":"1","order":"5046","possible_hits":"2",},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"#endif /* SECP256K1_SCALAR_REPR_IMPL_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-ab20411a83224715", "date" : "2019-06-01 07:50:29", "instrumented" : 238, "covered" : 238,};
var merged_data = [];
