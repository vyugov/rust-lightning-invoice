var data = {lines:[
{"lineNum":"    1","line":"use std::io::{self, Result};"},
{"lineNum":"    2","line":"use std::slice;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use ByteOrder;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"/// Extends [`Read`] with methods for reading numbers. (For `std::io`.)"},
{"lineNum":"    7","line":"///"},
{"lineNum":"    8","line":"/// Most of the methods defined here have an unconstrained type parameter that"},
{"lineNum":"    9","line":"/// must be explicitly instantiated. Typically, it is instantiated with either"},
{"lineNum":"   10","line":"/// the [`BigEndian`] or [`LittleEndian`] types defined in this crate."},
{"lineNum":"   11","line":"///"},
{"lineNum":"   12","line":"/// # Examples"},
{"lineNum":"   13","line":"///"},
{"lineNum":"   14","line":"/// Read unsigned 16 bit big-endian integers from a [`Read`]:"},
{"lineNum":"   15","line":"///"},
{"lineNum":"   16","line":"/// ```rust"},
{"lineNum":"   17","line":"/// use std::io::Cursor;"},
{"lineNum":"   18","line":"/// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"   19","line":"///"},
{"lineNum":"   20","line":"/// let mut rdr = Cursor::new(vec![2, 5, 3, 0]);"},
{"lineNum":"   21","line":"/// assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());"},
{"lineNum":"   22","line":"/// assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());"},
{"lineNum":"   23","line":"/// ```"},
{"lineNum":"   24","line":"///"},
{"lineNum":"   25","line":"/// [`BigEndian`]: enum.BigEndian.html"},
{"lineNum":"   26","line":"/// [`LittleEndian`]: enum.LittleEndian.html"},
{"lineNum":"   27","line":"/// [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html"},
{"lineNum":"   28","line":"pub trait ReadBytesExt: io::Read {"},
{"lineNum":"   29","line":"    /// Reads an unsigned 8 bit integer from the underlying reader."},
{"lineNum":"   30","line":"    ///"},
{"lineNum":"   31","line":"    /// Note that since this reads a single byte, no byte order conversions"},
{"lineNum":"   32","line":"    /// are used. It is included for completeness."},
{"lineNum":"   33","line":"    ///"},
{"lineNum":"   34","line":"    /// # Errors"},
{"lineNum":"   35","line":"    ///"},
{"lineNum":"   36","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"   37","line":"    ///"},
{"lineNum":"   38","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"   39","line":"    ///"},
{"lineNum":"   40","line":"    /// # Examples"},
{"lineNum":"   41","line":"    ///"},
{"lineNum":"   42","line":"    /// Read unsigned 8 bit integers from a `Read`:"},
{"lineNum":"   43","line":"    ///"},
{"lineNum":"   44","line":"    /// ```rust"},
{"lineNum":"   45","line":"    /// use std::io::Cursor;"},
{"lineNum":"   46","line":"    /// use byteorder::ReadBytesExt;"},
{"lineNum":"   47","line":"    ///"},
{"lineNum":"   48","line":"    /// let mut rdr = Cursor::new(vec![2, 5]);"},
{"lineNum":"   49","line":"    /// assert_eq!(2, rdr.read_u8().unwrap());"},
{"lineNum":"   50","line":"    /// assert_eq!(5, rdr.read_u8().unwrap());"},
{"lineNum":"   51","line":"    /// ```"},
{"lineNum":"   52","line":"    #[inline]"},
{"lineNum":"   53","line":"    fn read_u8(&mut self) -> Result<u8> {"},
{"lineNum":"   54","line":"        let mut buf = [0; 1];"},
{"lineNum":"   55","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"   56","line":"        Ok(buf[0])"},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    /// Reads a signed 8 bit integer from the underlying reader."},
{"lineNum":"   60","line":"    ///"},
{"lineNum":"   61","line":"    /// Note that since this reads a single byte, no byte order conversions"},
{"lineNum":"   62","line":"    /// are used. It is included for completeness."},
{"lineNum":"   63","line":"    ///"},
{"lineNum":"   64","line":"    /// # Errors"},
{"lineNum":"   65","line":"    ///"},
{"lineNum":"   66","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"   67","line":"    ///"},
{"lineNum":"   68","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"   69","line":"    ///"},
{"lineNum":"   70","line":"    /// # Examples"},
{"lineNum":"   71","line":"    ///"},
{"lineNum":"   72","line":"    /// Read signed 8 bit integers from a `Read`:"},
{"lineNum":"   73","line":"    ///"},
{"lineNum":"   74","line":"    /// ```rust"},
{"lineNum":"   75","line":"    /// use std::io::Cursor;"},
{"lineNum":"   76","line":"    /// use byteorder::ReadBytesExt;"},
{"lineNum":"   77","line":"    ///"},
{"lineNum":"   78","line":"    /// let mut rdr = Cursor::new(vec![0x02, 0xfb]);"},
{"lineNum":"   79","line":"    /// assert_eq!(2, rdr.read_i8().unwrap());"},
{"lineNum":"   80","line":"    /// assert_eq!(-5, rdr.read_i8().unwrap());"},
{"lineNum":"   81","line":"    /// ```"},
{"lineNum":"   82","line":"    #[inline]"},
{"lineNum":"   83","line":"    fn read_i8(&mut self) -> Result<i8> {"},
{"lineNum":"   84","line":"        let mut buf = [0; 1];"},
{"lineNum":"   85","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"   86","line":"        Ok(buf[0] as i8)"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    /// Reads an unsigned 16 bit integer from the underlying reader."},
{"lineNum":"   90","line":"    ///"},
{"lineNum":"   91","line":"    /// # Errors"},
{"lineNum":"   92","line":"    ///"},
{"lineNum":"   93","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"   94","line":"    ///"},
{"lineNum":"   95","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"   96","line":"    ///"},
{"lineNum":"   97","line":"    /// # Examples"},
{"lineNum":"   98","line":"    ///"},
{"lineNum":"   99","line":"    /// Read unsigned 16 bit big-endian integers from a `Read`:"},
{"lineNum":"  100","line":"    ///"},
{"lineNum":"  101","line":"    /// ```rust"},
{"lineNum":"  102","line":"    /// use std::io::Cursor;"},
{"lineNum":"  103","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  104","line":"    ///"},
{"lineNum":"  105","line":"    /// let mut rdr = Cursor::new(vec![2, 5, 3, 0]);"},
{"lineNum":"  106","line":"    /// assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());"},
{"lineNum":"  107","line":"    /// assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());"},
{"lineNum":"  108","line":"    /// ```"},
{"lineNum":"  109","line":"    #[inline]"},
{"lineNum":"  110","line":"    fn read_u16<T: ByteOrder>(&mut self) -> Result<u16> {"},
{"lineNum":"  111","line":"        let mut buf = [0; 2];"},
{"lineNum":"  112","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  113","line":"        Ok(T::read_u16(&buf))"},
{"lineNum":"  114","line":"    }"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    /// Reads a signed 16 bit integer from the underlying reader."},
{"lineNum":"  117","line":"    ///"},
{"lineNum":"  118","line":"    /// # Errors"},
{"lineNum":"  119","line":"    ///"},
{"lineNum":"  120","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  121","line":"    ///"},
{"lineNum":"  122","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  123","line":"    ///"},
{"lineNum":"  124","line":"    /// # Examples"},
{"lineNum":"  125","line":"    ///"},
{"lineNum":"  126","line":"    /// Read signed 16 bit big-endian integers from a `Read`:"},
{"lineNum":"  127","line":"    ///"},
{"lineNum":"  128","line":"    /// ```rust"},
{"lineNum":"  129","line":"    /// use std::io::Cursor;"},
{"lineNum":"  130","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  131","line":"    ///"},
{"lineNum":"  132","line":"    /// let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);"},
{"lineNum":"  133","line":"    /// assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());"},
{"lineNum":"  134","line":"    /// assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());"},
{"lineNum":"  135","line":"    /// ```"},
{"lineNum":"  136","line":"    #[inline]"},
{"lineNum":"  137","line":"    fn read_i16<T: ByteOrder>(&mut self) -> Result<i16> {"},
{"lineNum":"  138","line":"        let mut buf = [0; 2];"},
{"lineNum":"  139","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  140","line":"        Ok(T::read_i16(&buf))"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    /// Reads an unsigned 24 bit integer from the underlying reader."},
{"lineNum":"  144","line":"    ///"},
{"lineNum":"  145","line":"    /// # Errors"},
{"lineNum":"  146","line":"    ///"},
{"lineNum":"  147","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  148","line":"    ///"},
{"lineNum":"  149","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  150","line":"    ///"},
{"lineNum":"  151","line":"    /// # Examples"},
{"lineNum":"  152","line":"    ///"},
{"lineNum":"  153","line":"    /// Read unsigned 24 bit big-endian integers from a `Read`:"},
{"lineNum":"  154","line":"    ///"},
{"lineNum":"  155","line":"    /// ```rust"},
{"lineNum":"  156","line":"    /// use std::io::Cursor;"},
{"lineNum":"  157","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  158","line":"    ///"},
{"lineNum":"  159","line":"    /// let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);"},
{"lineNum":"  160","line":"    /// assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());"},
{"lineNum":"  161","line":"    /// ```"},
{"lineNum":"  162","line":"    #[inline]"},
{"lineNum":"  163","line":"    fn read_u24<T: ByteOrder>(&mut self) -> Result<u32> {"},
{"lineNum":"  164","line":"        let mut buf = [0; 3];"},
{"lineNum":"  165","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  166","line":"        Ok(T::read_u24(&buf))"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    /// Reads a signed 24 bit integer from the underlying reader."},
{"lineNum":"  170","line":"    ///"},
{"lineNum":"  171","line":"    /// # Errors"},
{"lineNum":"  172","line":"    ///"},
{"lineNum":"  173","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  174","line":"    ///"},
{"lineNum":"  175","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  176","line":"    ///"},
{"lineNum":"  177","line":"    /// # Examples"},
{"lineNum":"  178","line":"    ///"},
{"lineNum":"  179","line":"    /// Read signed 24 bit big-endian integers from a `Read`:"},
{"lineNum":"  180","line":"    ///"},
{"lineNum":"  181","line":"    /// ```rust"},
{"lineNum":"  182","line":"    /// use std::io::Cursor;"},
{"lineNum":"  183","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  184","line":"    ///"},
{"lineNum":"  185","line":"    /// let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);"},
{"lineNum":"  186","line":"    /// assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());"},
{"lineNum":"  187","line":"    /// ```"},
{"lineNum":"  188","line":"    #[inline]"},
{"lineNum":"  189","line":"    fn read_i24<T: ByteOrder>(&mut self) -> Result<i32> {"},
{"lineNum":"  190","line":"        let mut buf = [0; 3];"},
{"lineNum":"  191","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  192","line":"        Ok(T::read_i24(&buf))"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    /// Reads an unsigned 32 bit integer from the underlying reader."},
{"lineNum":"  196","line":"    ///"},
{"lineNum":"  197","line":"    /// # Errors"},
{"lineNum":"  198","line":"    ///"},
{"lineNum":"  199","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  200","line":"    ///"},
{"lineNum":"  201","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  202","line":"    ///"},
{"lineNum":"  203","line":"    /// # Examples"},
{"lineNum":"  204","line":"    ///"},
{"lineNum":"  205","line":"    /// Read unsigned 32 bit big-endian integers from a `Read`:"},
{"lineNum":"  206","line":"    ///"},
{"lineNum":"  207","line":"    /// ```rust"},
{"lineNum":"  208","line":"    /// use std::io::Cursor;"},
{"lineNum":"  209","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  210","line":"    ///"},
{"lineNum":"  211","line":"    /// let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);"},
{"lineNum":"  212","line":"    /// assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());"},
{"lineNum":"  213","line":"    /// ```"},
{"lineNum":"  214","line":"    #[inline]"},
{"lineNum":"  215","line":"    fn read_u32<T: ByteOrder>(&mut self) -> Result<u32> {"},
{"lineNum":"  216","line":"        let mut buf = [0; 4];"},
{"lineNum":"  217","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  218","line":"        Ok(T::read_u32(&buf))"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    /// Reads a signed 32 bit integer from the underlying reader."},
{"lineNum":"  222","line":"    ///"},
{"lineNum":"  223","line":"    /// # Errors"},
{"lineNum":"  224","line":"    ///"},
{"lineNum":"  225","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  226","line":"    ///"},
{"lineNum":"  227","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  228","line":"    ///"},
{"lineNum":"  229","line":"    /// # Examples"},
{"lineNum":"  230","line":"    ///"},
{"lineNum":"  231","line":"    /// Read signed 32 bit big-endian integers from a `Read`:"},
{"lineNum":"  232","line":"    ///"},
{"lineNum":"  233","line":"    /// ```rust"},
{"lineNum":"  234","line":"    /// use std::io::Cursor;"},
{"lineNum":"  235","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  236","line":"    ///"},
{"lineNum":"  237","line":"    /// let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);"},
{"lineNum":"  238","line":"    /// assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());"},
{"lineNum":"  239","line":"    /// ```"},
{"lineNum":"  240","line":"    #[inline]"},
{"lineNum":"  241","line":"    fn read_i32<T: ByteOrder>(&mut self) -> Result<i32> {"},
{"lineNum":"  242","line":"        let mut buf = [0; 4];"},
{"lineNum":"  243","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  244","line":"        Ok(T::read_i32(&buf))"},
{"lineNum":"  245","line":"    }"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"    /// Reads an unsigned 48 bit integer from the underlying reader."},
{"lineNum":"  248","line":"    ///"},
{"lineNum":"  249","line":"    /// # Errors"},
{"lineNum":"  250","line":"    ///"},
{"lineNum":"  251","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  252","line":"    ///"},
{"lineNum":"  253","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  254","line":"    ///"},
{"lineNum":"  255","line":"    /// # Examples"},
{"lineNum":"  256","line":"    ///"},
{"lineNum":"  257","line":"    /// Read unsigned 48 bit big-endian integers from a `Read`:"},
{"lineNum":"  258","line":"    ///"},
{"lineNum":"  259","line":"    /// ```rust"},
{"lineNum":"  260","line":"    /// use std::io::Cursor;"},
{"lineNum":"  261","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  262","line":"    ///"},
{"lineNum":"  263","line":"    /// let mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);"},
{"lineNum":"  264","line":"    /// assert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());"},
{"lineNum":"  265","line":"    /// ```"},
{"lineNum":"  266","line":"    #[inline]"},
{"lineNum":"  267","line":"    fn read_u48<T: ByteOrder>(&mut self) -> Result<u64> {"},
{"lineNum":"  268","line":"        let mut buf = [0; 6];"},
{"lineNum":"  269","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  270","line":"        Ok(T::read_u48(&buf))"},
{"lineNum":"  271","line":"    }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    /// Reads a signed 48 bit integer from the underlying reader."},
{"lineNum":"  274","line":"    ///"},
{"lineNum":"  275","line":"    /// # Errors"},
{"lineNum":"  276","line":"    ///"},
{"lineNum":"  277","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  278","line":"    ///"},
{"lineNum":"  279","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  280","line":"    ///"},
{"lineNum":"  281","line":"    /// # Examples"},
{"lineNum":"  282","line":"    ///"},
{"lineNum":"  283","line":"    /// Read signed 48 bit big-endian integers from a `Read`:"},
{"lineNum":"  284","line":"    ///"},
{"lineNum":"  285","line":"    /// ```rust"},
{"lineNum":"  286","line":"    /// use std::io::Cursor;"},
{"lineNum":"  287","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  288","line":"    ///"},
{"lineNum":"  289","line":"    /// let mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);"},
{"lineNum":"  290","line":"    /// assert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());"},
{"lineNum":"  291","line":"    /// ```"},
{"lineNum":"  292","line":"    #[inline]"},
{"lineNum":"  293","line":"    fn read_i48<T: ByteOrder>(&mut self) -> Result<i64> {"},
{"lineNum":"  294","line":"        let mut buf = [0; 6];"},
{"lineNum":"  295","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  296","line":"        Ok(T::read_i48(&buf))"},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    /// Reads an unsigned 64 bit integer from the underlying reader."},
{"lineNum":"  300","line":"    ///"},
{"lineNum":"  301","line":"    /// # Errors"},
{"lineNum":"  302","line":"    ///"},
{"lineNum":"  303","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  304","line":"    ///"},
{"lineNum":"  305","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  306","line":"    ///"},
{"lineNum":"  307","line":"    /// # Examples"},
{"lineNum":"  308","line":"    ///"},
{"lineNum":"  309","line":"    /// Read an unsigned 64 bit big-endian integer from a `Read`:"},
{"lineNum":"  310","line":"    ///"},
{"lineNum":"  311","line":"    /// ```rust"},
{"lineNum":"  312","line":"    /// use std::io::Cursor;"},
{"lineNum":"  313","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  314","line":"    ///"},
{"lineNum":"  315","line":"    /// let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);"},
{"lineNum":"  316","line":"    /// assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());"},
{"lineNum":"  317","line":"    /// ```"},
{"lineNum":"  318","line":"    #[inline]"},
{"lineNum":"  319","line":"    fn read_u64<T: ByteOrder>(&mut self) -> Result<u64> {"},
{"lineNum":"  320","line":"        let mut buf = [0; 8];"},
{"lineNum":"  321","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  322","line":"        Ok(T::read_u64(&buf))"},
{"lineNum":"  323","line":"    }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    /// Reads a signed 64 bit integer from the underlying reader."},
{"lineNum":"  326","line":"    ///"},
{"lineNum":"  327","line":"    /// # Errors"},
{"lineNum":"  328","line":"    ///"},
{"lineNum":"  329","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  330","line":"    ///"},
{"lineNum":"  331","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  332","line":"    ///"},
{"lineNum":"  333","line":"    /// # Examples"},
{"lineNum":"  334","line":"    ///"},
{"lineNum":"  335","line":"    /// Read a signed 64 bit big-endian integer from a `Read`:"},
{"lineNum":"  336","line":"    ///"},
{"lineNum":"  337","line":"    /// ```rust"},
{"lineNum":"  338","line":"    /// use std::io::Cursor;"},
{"lineNum":"  339","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  340","line":"    ///"},
{"lineNum":"  341","line":"    /// let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);"},
{"lineNum":"  342","line":"    /// assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());"},
{"lineNum":"  343","line":"    /// ```"},
{"lineNum":"  344","line":"    #[inline]"},
{"lineNum":"  345","line":"    fn read_i64<T: ByteOrder>(&mut self) -> Result<i64> {"},
{"lineNum":"  346","line":"        let mut buf = [0; 8];"},
{"lineNum":"  347","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  348","line":"        Ok(T::read_i64(&buf))"},
{"lineNum":"  349","line":"    }"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"    /// Reads an unsigned 128 bit integer from the underlying reader."},
{"lineNum":"  352","line":"    ///"},
{"lineNum":"  353","line":"    /// # Errors"},
{"lineNum":"  354","line":"    ///"},
{"lineNum":"  355","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  356","line":"    ///"},
{"lineNum":"  357","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  358","line":"    ///"},
{"lineNum":"  359","line":"    /// # Examples"},
{"lineNum":"  360","line":"    ///"},
{"lineNum":"  361","line":"    /// Read an unsigned 128 bit big-endian integer from a `Read`:"},
{"lineNum":"  362","line":"    ///"},
{"lineNum":"  363","line":"    /// ```rust"},
{"lineNum":"  364","line":"    /// use std::io::Cursor;"},
{"lineNum":"  365","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  366","line":"    ///"},
{"lineNum":"  367","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  368","line":"    ///     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,"},
{"lineNum":"  369","line":"    ///     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83"},
{"lineNum":"  370","line":"    /// ]);"},
{"lineNum":"  371","line":"    /// assert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());"},
{"lineNum":"  372","line":"    /// ```"},
{"lineNum":"  373","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  374","line":"    #[inline]"},
{"lineNum":"  375","line":"    fn read_u128<T: ByteOrder>(&mut self) -> Result<u128> {"},
{"lineNum":"  376","line":"        let mut buf = [0; 16];"},
{"lineNum":"  377","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  378","line":"        Ok(T::read_u128(&buf))"},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    /// Reads a signed 128 bit integer from the underlying reader."},
{"lineNum":"  382","line":"    ///"},
{"lineNum":"  383","line":"    /// # Errors"},
{"lineNum":"  384","line":"    ///"},
{"lineNum":"  385","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  386","line":"    ///"},
{"lineNum":"  387","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  388","line":"    ///"},
{"lineNum":"  389","line":"    /// # Examples"},
{"lineNum":"  390","line":"    ///"},
{"lineNum":"  391","line":"    /// Read a signed 128 bit big-endian integer from a `Read`:"},
{"lineNum":"  392","line":"    ///"},
{"lineNum":"  393","line":"    /// ```rust"},
{"lineNum":"  394","line":"    /// use std::io::Cursor;"},
{"lineNum":"  395","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  396","line":"    ///"},
{"lineNum":"  397","line":"    /// let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"},
{"lineNum":"  398","line":"    /// assert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());"},
{"lineNum":"  399","line":"    /// ```"},
{"lineNum":"  400","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  401","line":"    #[inline]"},
{"lineNum":"  402","line":"    fn read_i128<T: ByteOrder>(&mut self) -> Result<i128> {"},
{"lineNum":"  403","line":"        let mut buf = [0; 16];"},
{"lineNum":"  404","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  405","line":"        Ok(T::read_i128(&buf))"},
{"lineNum":"  406","line":"    }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    /// Reads an unsigned n-bytes integer from the underlying reader."},
{"lineNum":"  409","line":"    ///"},
{"lineNum":"  410","line":"    /// # Errors"},
{"lineNum":"  411","line":"    ///"},
{"lineNum":"  412","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  413","line":"    ///"},
{"lineNum":"  414","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  415","line":"    ///"},
{"lineNum":"  416","line":"    /// # Examples"},
{"lineNum":"  417","line":"    ///"},
{"lineNum":"  418","line":"    /// Read an unsigned n-byte big-endian integer from a `Read`:"},
{"lineNum":"  419","line":"    ///"},
{"lineNum":"  420","line":"    /// ```rust"},
{"lineNum":"  421","line":"    /// use std::io::Cursor;"},
{"lineNum":"  422","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  423","line":"    ///"},
{"lineNum":"  424","line":"    /// let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);"},
{"lineNum":"  425","line":"    /// assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());"},
{"lineNum":"  426","line":"    #[inline]"},
{"lineNum":"  427","line":"    fn read_uint<T: ByteOrder>(&mut self, nbytes: usize) -> Result<u64> {"},
{"lineNum":"  428","line":"        let mut buf = [0; 8];"},
{"lineNum":"  429","line":"        try!(self.read_exact(&mut buf[..nbytes]));"},
{"lineNum":"  430","line":"        Ok(T::read_uint(&buf[..nbytes], nbytes))"},
{"lineNum":"  431","line":"    }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    /// Reads a signed n-bytes integer from the underlying reader."},
{"lineNum":"  434","line":"    ///"},
{"lineNum":"  435","line":"    /// # Errors"},
{"lineNum":"  436","line":"    ///"},
{"lineNum":"  437","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  438","line":"    ///"},
{"lineNum":"  439","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  440","line":"    ///"},
{"lineNum":"  441","line":"    /// # Examples"},
{"lineNum":"  442","line":"    ///"},
{"lineNum":"  443","line":"    /// Read an unsigned n-byte big-endian integer from a `Read`:"},
{"lineNum":"  444","line":"    ///"},
{"lineNum":"  445","line":"    /// ```rust"},
{"lineNum":"  446","line":"    /// use std::io::Cursor;"},
{"lineNum":"  447","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  448","line":"    ///"},
{"lineNum":"  449","line":"    /// let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);"},
{"lineNum":"  450","line":"    /// assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());"},
{"lineNum":"  451","line":"    #[inline]"},
{"lineNum":"  452","line":"    fn read_int<T: ByteOrder>(&mut self, nbytes: usize) -> Result<i64> {"},
{"lineNum":"  453","line":"        let mut buf = [0; 8];"},
{"lineNum":"  454","line":"        try!(self.read_exact(&mut buf[..nbytes]));"},
{"lineNum":"  455","line":"        Ok(T::read_int(&buf[..nbytes], nbytes))"},
{"lineNum":"  456","line":"    }"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    /// Reads an unsigned n-bytes integer from the underlying reader."},
{"lineNum":"  459","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  460","line":"    #[inline]"},
{"lineNum":"  461","line":"    fn read_uint128<T: ByteOrder>(&mut self, nbytes: usize) -> Result<u128> {"},
{"lineNum":"  462","line":"        let mut buf = [0; 16];"},
{"lineNum":"  463","line":"        try!(self.read_exact(&mut buf[..nbytes]));"},
{"lineNum":"  464","line":"        Ok(T::read_uint128(&buf[..nbytes], nbytes))"},
{"lineNum":"  465","line":"    }"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"    /// Reads a signed n-bytes integer from the underlying reader."},
{"lineNum":"  468","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  469","line":"    #[inline]"},
{"lineNum":"  470","line":"    fn read_int128<T: ByteOrder>(&mut self, nbytes: usize) -> Result<i128> {"},
{"lineNum":"  471","line":"        let mut buf = [0; 16];"},
{"lineNum":"  472","line":"        try!(self.read_exact(&mut buf[..nbytes]));"},
{"lineNum":"  473","line":"        Ok(T::read_int128(&buf[..nbytes], nbytes))"},
{"lineNum":"  474","line":"    }"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"    /// Reads a IEEE754 single-precision (4 bytes) floating point number from"},
{"lineNum":"  477","line":"    /// the underlying reader."},
{"lineNum":"  478","line":"    ///"},
{"lineNum":"  479","line":"    /// # Errors"},
{"lineNum":"  480","line":"    ///"},
{"lineNum":"  481","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  482","line":"    ///"},
{"lineNum":"  483","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  484","line":"    ///"},
{"lineNum":"  485","line":"    /// # Examples"},
{"lineNum":"  486","line":"    ///"},
{"lineNum":"  487","line":"    /// Read a big-endian single-precision floating point number from a `Read`:"},
{"lineNum":"  488","line":"    ///"},
{"lineNum":"  489","line":"    /// ```rust"},
{"lineNum":"  490","line":"    /// use std::f32;"},
{"lineNum":"  491","line":"    /// use std::io::Cursor;"},
{"lineNum":"  492","line":"    ///"},
{"lineNum":"  493","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  494","line":"    ///"},
{"lineNum":"  495","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  496","line":"    ///     0x40, 0x49, 0x0f, 0xdb,"},
{"lineNum":"  497","line":"    /// ]);"},
{"lineNum":"  498","line":"    /// assert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());"},
{"lineNum":"  499","line":"    /// ```"},
{"lineNum":"  500","line":"    #[inline]"},
{"lineNum":"  501","line":"    fn read_f32<T: ByteOrder>(&mut self) -> Result<f32> {"},
{"lineNum":"  502","line":"        let mut buf = [0; 4];"},
{"lineNum":"  503","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  504","line":"        Ok(T::read_f32(&buf))"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    /// Reads a IEEE754 double-precision (8 bytes) floating point number from"},
{"lineNum":"  508","line":"    /// the underlying reader."},
{"lineNum":"  509","line":"    ///"},
{"lineNum":"  510","line":"    /// # Errors"},
{"lineNum":"  511","line":"    ///"},
{"lineNum":"  512","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  513","line":"    ///"},
{"lineNum":"  514","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  515","line":"    ///"},
{"lineNum":"  516","line":"    /// # Examples"},
{"lineNum":"  517","line":"    ///"},
{"lineNum":"  518","line":"    /// Read a big-endian double-precision floating point number from a `Read`:"},
{"lineNum":"  519","line":"    ///"},
{"lineNum":"  520","line":"    /// ```rust"},
{"lineNum":"  521","line":"    /// use std::f64;"},
{"lineNum":"  522","line":"    /// use std::io::Cursor;"},
{"lineNum":"  523","line":"    ///"},
{"lineNum":"  524","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  525","line":"    ///"},
{"lineNum":"  526","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  527","line":"    ///     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,"},
{"lineNum":"  528","line":"    /// ]);"},
{"lineNum":"  529","line":"    /// assert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());"},
{"lineNum":"  530","line":"    /// ```"},
{"lineNum":"  531","line":"    #[inline]"},
{"lineNum":"  532","line":"    fn read_f64<T: ByteOrder>(&mut self) -> Result<f64> {"},
{"lineNum":"  533","line":"        let mut buf = [0; 8];"},
{"lineNum":"  534","line":"        try!(self.read_exact(&mut buf));"},
{"lineNum":"  535","line":"        Ok(T::read_f64(&buf))"},
{"lineNum":"  536","line":"    }"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"    /// Reads a sequence of unsigned 16 bit integers from the underlying"},
{"lineNum":"  539","line":"    /// reader."},
{"lineNum":"  540","line":"    ///"},
{"lineNum":"  541","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  542","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  543","line":"    ///"},
{"lineNum":"  544","line":"    /// # Errors"},
{"lineNum":"  545","line":"    ///"},
{"lineNum":"  546","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  547","line":"    ///"},
{"lineNum":"  548","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  549","line":"    ///"},
{"lineNum":"  550","line":"    /// # Examples"},
{"lineNum":"  551","line":"    ///"},
{"lineNum":"  552","line":"    /// Read a sequence of unsigned 16 bit big-endian integers from a `Read`:"},
{"lineNum":"  553","line":"    ///"},
{"lineNum":"  554","line":"    /// ```rust"},
{"lineNum":"  555","line":"    /// use std::io::Cursor;"},
{"lineNum":"  556","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  557","line":"    ///"},
{"lineNum":"  558","line":"    /// let mut rdr = Cursor::new(vec![2, 5, 3, 0]);"},
{"lineNum":"  559","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  560","line":"    /// rdr.read_u16_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  561","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  562","line":"    /// ```"},
{"lineNum":"  563","line":"    #[inline]"},
{"lineNum":"  564","line":"    fn read_u16_into<T: ByteOrder>(&mut self, dst: &mut [u16]) -> Result<()> {"},
{"lineNum":"  565","line":"        {"},
{"lineNum":"  566","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  567","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  568","line":"        }"},
{"lineNum":"  569","line":"        T::from_slice_u16(dst);"},
{"lineNum":"  570","line":"        Ok(())"},
{"lineNum":"  571","line":"    }"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    /// Reads a sequence of unsigned 32 bit integers from the underlying"},
{"lineNum":"  574","line":"    /// reader."},
{"lineNum":"  575","line":"    ///"},
{"lineNum":"  576","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  577","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  578","line":"    ///"},
{"lineNum":"  579","line":"    /// # Errors"},
{"lineNum":"  580","line":"    ///"},
{"lineNum":"  581","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  582","line":"    ///"},
{"lineNum":"  583","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  584","line":"    ///"},
{"lineNum":"  585","line":"    /// # Examples"},
{"lineNum":"  586","line":"    ///"},
{"lineNum":"  587","line":"    /// Read a sequence of unsigned 32 bit big-endian integers from a `Read`:"},
{"lineNum":"  588","line":"    ///"},
{"lineNum":"  589","line":"    /// ```rust"},
{"lineNum":"  590","line":"    /// use std::io::Cursor;"},
{"lineNum":"  591","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  592","line":"    ///"},
{"lineNum":"  593","line":"    /// let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);"},
{"lineNum":"  594","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  595","line":"    /// rdr.read_u32_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  596","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  597","line":"    /// ```"},
{"lineNum":"  598","line":"    #[inline]"},
{"lineNum":"  599","line":"    fn read_u32_into<T: ByteOrder>(&mut self, dst: &mut [u32]) -> Result<()> {"},
{"lineNum":"  600","line":"        {"},
{"lineNum":"  601","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  602","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  603","line":"        }"},
{"lineNum":"  604","line":"        T::from_slice_u32(dst);"},
{"lineNum":"  605","line":"        Ok(())"},
{"lineNum":"  606","line":"    }"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"    /// Reads a sequence of unsigned 64 bit integers from the underlying"},
{"lineNum":"  609","line":"    /// reader."},
{"lineNum":"  610","line":"    ///"},
{"lineNum":"  611","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  612","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  613","line":"    ///"},
{"lineNum":"  614","line":"    /// # Errors"},
{"lineNum":"  615","line":"    ///"},
{"lineNum":"  616","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  617","line":"    ///"},
{"lineNum":"  618","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  619","line":"    ///"},
{"lineNum":"  620","line":"    /// # Examples"},
{"lineNum":"  621","line":"    ///"},
{"lineNum":"  622","line":"    /// Read a sequence of unsigned 64 bit big-endian integers from a `Read`:"},
{"lineNum":"  623","line":"    ///"},
{"lineNum":"  624","line":"    /// ```rust"},
{"lineNum":"  625","line":"    /// use std::io::Cursor;"},
{"lineNum":"  626","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  627","line":"    ///"},
{"lineNum":"  628","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  629","line":"    ///     0, 0, 0, 0, 0, 0, 2, 5,"},
{"lineNum":"  630","line":"    ///     0, 0, 0, 0, 0, 0, 3, 0,"},
{"lineNum":"  631","line":"    /// ]);"},
{"lineNum":"  632","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  633","line":"    /// rdr.read_u64_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  634","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  635","line":"    /// ```"},
{"lineNum":"  636","line":"    #[inline]"},
{"lineNum":"  637","line":"    fn read_u64_into<T: ByteOrder>(&mut self, dst: &mut [u64]) -> Result<()> {"},
{"lineNum":"  638","line":"        {"},
{"lineNum":"  639","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  640","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  641","line":"        }"},
{"lineNum":"  642","line":"        T::from_slice_u64(dst);"},
{"lineNum":"  643","line":"        Ok(())"},
{"lineNum":"  644","line":"    }"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    /// Reads a sequence of unsigned 128 bit integers from the underlying"},
{"lineNum":"  647","line":"    /// reader."},
{"lineNum":"  648","line":"    ///"},
{"lineNum":"  649","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  650","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  651","line":"    ///"},
{"lineNum":"  652","line":"    /// # Errors"},
{"lineNum":"  653","line":"    ///"},
{"lineNum":"  654","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  655","line":"    ///"},
{"lineNum":"  656","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  657","line":"    ///"},
{"lineNum":"  658","line":"    /// # Examples"},
{"lineNum":"  659","line":"    ///"},
{"lineNum":"  660","line":"    /// Read a sequence of unsigned 128 bit big-endian integers from a `Read`:"},
{"lineNum":"  661","line":"    ///"},
{"lineNum":"  662","line":"    /// ```rust"},
{"lineNum":"  663","line":"    /// use std::io::Cursor;"},
{"lineNum":"  664","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  665","line":"    ///"},
{"lineNum":"  666","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  667","line":"    ///     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,"},
{"lineNum":"  668","line":"    ///     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,"},
{"lineNum":"  669","line":"    /// ]);"},
{"lineNum":"  670","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  671","line":"    /// rdr.read_u128_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  672","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  673","line":"    /// ```"},
{"lineNum":"  674","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  675","line":"    #[inline]"},
{"lineNum":"  676","line":"    fn read_u128_into<T: ByteOrder>("},
{"lineNum":"  677","line":"        &mut self,"},
{"lineNum":"  678","line":"        dst: &mut [u128],"},
{"lineNum":"  679","line":"    ) -> Result<()> {"},
{"lineNum":"  680","line":"        {"},
{"lineNum":"  681","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  682","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":"        T::from_slice_u128(dst);"},
{"lineNum":"  685","line":"        Ok(())"},
{"lineNum":"  686","line":"    }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"    /// Reads a sequence of signed 16 bit integers from the underlying"},
{"lineNum":"  689","line":"    /// reader."},
{"lineNum":"  690","line":"    ///"},
{"lineNum":"  691","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  692","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  693","line":"    ///"},
{"lineNum":"  694","line":"    /// # Errors"},
{"lineNum":"  695","line":"    ///"},
{"lineNum":"  696","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  697","line":"    ///"},
{"lineNum":"  698","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  699","line":"    ///"},
{"lineNum":"  700","line":"    /// # Examples"},
{"lineNum":"  701","line":"    ///"},
{"lineNum":"  702","line":"    /// Read a sequence of signed 16 bit big-endian integers from a `Read`:"},
{"lineNum":"  703","line":"    ///"},
{"lineNum":"  704","line":"    /// ```rust"},
{"lineNum":"  705","line":"    /// use std::io::Cursor;"},
{"lineNum":"  706","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  707","line":"    ///"},
{"lineNum":"  708","line":"    /// let mut rdr = Cursor::new(vec![2, 5, 3, 0]);"},
{"lineNum":"  709","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  710","line":"    /// rdr.read_i16_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  711","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  712","line":"    /// ```"},
{"lineNum":"  713","line":"    #[inline]"},
{"lineNum":"  714","line":"    fn read_i16_into<T: ByteOrder>(&mut self, dst: &mut [i16]) -> Result<()> {"},
{"lineNum":"  715","line":"        {"},
{"lineNum":"  716","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  717","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  718","line":"        }"},
{"lineNum":"  719","line":"        T::from_slice_i16(dst);"},
{"lineNum":"  720","line":"        Ok(())"},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"    /// Reads a sequence of signed 32 bit integers from the underlying"},
{"lineNum":"  724","line":"    /// reader."},
{"lineNum":"  725","line":"    ///"},
{"lineNum":"  726","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  727","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  728","line":"    ///"},
{"lineNum":"  729","line":"    /// # Errors"},
{"lineNum":"  730","line":"    ///"},
{"lineNum":"  731","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  732","line":"    ///"},
{"lineNum":"  733","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  734","line":"    ///"},
{"lineNum":"  735","line":"    /// # Examples"},
{"lineNum":"  736","line":"    ///"},
{"lineNum":"  737","line":"    /// Read a sequence of signed 32 bit big-endian integers from a `Read`:"},
{"lineNum":"  738","line":"    ///"},
{"lineNum":"  739","line":"    /// ```rust"},
{"lineNum":"  740","line":"    /// use std::io::Cursor;"},
{"lineNum":"  741","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  742","line":"    ///"},
{"lineNum":"  743","line":"    /// let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);"},
{"lineNum":"  744","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  745","line":"    /// rdr.read_i32_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  746","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  747","line":"    /// ```"},
{"lineNum":"  748","line":"    #[inline]"},
{"lineNum":"  749","line":"    fn read_i32_into<T: ByteOrder>(&mut self, dst: &mut [i32]) -> Result<()> {"},
{"lineNum":"  750","line":"        {"},
{"lineNum":"  751","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  752","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  753","line":"        }"},
{"lineNum":"  754","line":"        T::from_slice_i32(dst);"},
{"lineNum":"  755","line":"        Ok(())"},
{"lineNum":"  756","line":"    }"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"    /// Reads a sequence of signed 64 bit integers from the underlying"},
{"lineNum":"  759","line":"    /// reader."},
{"lineNum":"  760","line":"    ///"},
{"lineNum":"  761","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  762","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  763","line":"    ///"},
{"lineNum":"  764","line":"    /// # Errors"},
{"lineNum":"  765","line":"    ///"},
{"lineNum":"  766","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  767","line":"    ///"},
{"lineNum":"  768","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  769","line":"    ///"},
{"lineNum":"  770","line":"    /// # Examples"},
{"lineNum":"  771","line":"    ///"},
{"lineNum":"  772","line":"    /// Read a sequence of signed 64 bit big-endian integers from a `Read`:"},
{"lineNum":"  773","line":"    ///"},
{"lineNum":"  774","line":"    /// ```rust"},
{"lineNum":"  775","line":"    /// use std::io::Cursor;"},
{"lineNum":"  776","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  777","line":"    ///"},
{"lineNum":"  778","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  779","line":"    ///     0, 0, 0, 0, 0, 0, 2, 5,"},
{"lineNum":"  780","line":"    ///     0, 0, 0, 0, 0, 0, 3, 0,"},
{"lineNum":"  781","line":"    /// ]);"},
{"lineNum":"  782","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  783","line":"    /// rdr.read_i64_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  784","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  785","line":"    /// ```"},
{"lineNum":"  786","line":"    #[inline]"},
{"lineNum":"  787","line":"    fn read_i64_into<T: ByteOrder>(&mut self, dst: &mut [i64]) -> Result<()> {"},
{"lineNum":"  788","line":"        {"},
{"lineNum":"  789","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  790","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  791","line":"        }"},
{"lineNum":"  792","line":"        T::from_slice_i64(dst);"},
{"lineNum":"  793","line":"        Ok(())"},
{"lineNum":"  794","line":"    }"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"    /// Reads a sequence of signed 128 bit integers from the underlying"},
{"lineNum":"  797","line":"    /// reader."},
{"lineNum":"  798","line":"    ///"},
{"lineNum":"  799","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  800","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  801","line":"    ///"},
{"lineNum":"  802","line":"    /// # Errors"},
{"lineNum":"  803","line":"    ///"},
{"lineNum":"  804","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  805","line":"    ///"},
{"lineNum":"  806","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  807","line":"    ///"},
{"lineNum":"  808","line":"    /// # Examples"},
{"lineNum":"  809","line":"    ///"},
{"lineNum":"  810","line":"    /// Read a sequence of signed 128 bit big-endian integers from a `Read`:"},
{"lineNum":"  811","line":"    ///"},
{"lineNum":"  812","line":"    /// ```rust"},
{"lineNum":"  813","line":"    /// use std::io::Cursor;"},
{"lineNum":"  814","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  815","line":"    ///"},
{"lineNum":"  816","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  817","line":"    ///     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,"},
{"lineNum":"  818","line":"    ///     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,"},
{"lineNum":"  819","line":"    /// ]);"},
{"lineNum":"  820","line":"    /// let mut dst = [0; 2];"},
{"lineNum":"  821","line":"    /// rdr.read_i128_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  822","line":"    /// assert_eq!([517, 768], dst);"},
{"lineNum":"  823","line":"    /// ```"},
{"lineNum":"  824","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  825","line":"    #[inline]"},
{"lineNum":"  826","line":"    fn read_i128_into<T: ByteOrder>("},
{"lineNum":"  827","line":"        &mut self,"},
{"lineNum":"  828","line":"        dst: &mut [i128],"},
{"lineNum":"  829","line":"    ) -> Result<()> {"},
{"lineNum":"  830","line":"        {"},
{"lineNum":"  831","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  832","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  833","line":"        }"},
{"lineNum":"  834","line":"        T::from_slice_i128(dst);"},
{"lineNum":"  835","line":"        Ok(())"},
{"lineNum":"  836","line":"    }"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    /// Reads a sequence of IEEE754 single-precision (4 bytes) floating"},
{"lineNum":"  839","line":"    /// point numbers from the underlying reader."},
{"lineNum":"  840","line":"    ///"},
{"lineNum":"  841","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  842","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  843","line":"    ///"},
{"lineNum":"  844","line":"    /// # Errors"},
{"lineNum":"  845","line":"    ///"},
{"lineNum":"  846","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  847","line":"    ///"},
{"lineNum":"  848","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  849","line":"    ///"},
{"lineNum":"  850","line":"    /// # Examples"},
{"lineNum":"  851","line":"    ///"},
{"lineNum":"  852","line":"    /// Read a sequence of big-endian single-precision floating point number"},
{"lineNum":"  853","line":"    /// from a `Read`:"},
{"lineNum":"  854","line":"    ///"},
{"lineNum":"  855","line":"    /// ```rust"},
{"lineNum":"  856","line":"    /// use std::f32;"},
{"lineNum":"  857","line":"    /// use std::io::Cursor;"},
{"lineNum":"  858","line":"    ///"},
{"lineNum":"  859","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  860","line":"    ///"},
{"lineNum":"  861","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  862","line":"    ///     0x40, 0x49, 0x0f, 0xdb,"},
{"lineNum":"  863","line":"    ///     0x3f, 0x80, 0x00, 0x00,"},
{"lineNum":"  864","line":"    /// ]);"},
{"lineNum":"  865","line":"    /// let mut dst = [0.0; 2];"},
{"lineNum":"  866","line":"    /// rdr.read_f32_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  867","line":"    /// assert_eq!([f32::consts::PI, 1.0], dst);"},
{"lineNum":"  868","line":"    /// ```"},
{"lineNum":"  869","line":"    #[inline]"},
{"lineNum":"  870","line":"    fn read_f32_into<T: ByteOrder>("},
{"lineNum":"  871","line":"        &mut self,"},
{"lineNum":"  872","line":"        dst: &mut [f32],"},
{"lineNum":"  873","line":"    ) -> Result<()> {"},
{"lineNum":"  874","line":"        {"},
{"lineNum":"  875","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  876","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  877","line":"        }"},
{"lineNum":"  878","line":"        T::from_slice_f32(dst);"},
{"lineNum":"  879","line":"        Ok(())"},
{"lineNum":"  880","line":"    }"},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"    /// **DEPRECATED**."},
{"lineNum":"  883","line":"    ///"},
{"lineNum":"  884","line":"    /// This method is deprecated. Use `read_f32_into` instead."},
{"lineNum":"  885","line":"    ///"},
{"lineNum":"  886","line":"    /// Reads a sequence of IEEE754 single-precision (4 bytes) floating"},
{"lineNum":"  887","line":"    /// point numbers from the underlying reader."},
{"lineNum":"  888","line":"    ///"},
{"lineNum":"  889","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  890","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  891","line":"    ///"},
{"lineNum":"  892","line":"    /// # Errors"},
{"lineNum":"  893","line":"    ///"},
{"lineNum":"  894","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  895","line":"    ///"},
{"lineNum":"  896","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  897","line":"    ///"},
{"lineNum":"  898","line":"    /// # Examples"},
{"lineNum":"  899","line":"    ///"},
{"lineNum":"  900","line":"    /// Read a sequence of big-endian single-precision floating point number"},
{"lineNum":"  901","line":"    /// from a `Read`:"},
{"lineNum":"  902","line":"    ///"},
{"lineNum":"  903","line":"    /// ```rust"},
{"lineNum":"  904","line":"    /// use std::f32;"},
{"lineNum":"  905","line":"    /// use std::io::Cursor;"},
{"lineNum":"  906","line":"    ///"},
{"lineNum":"  907","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  908","line":"    ///"},
{"lineNum":"  909","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  910","line":"    ///     0x40, 0x49, 0x0f, 0xdb,"},
{"lineNum":"  911","line":"    ///     0x3f, 0x80, 0x00, 0x00,"},
{"lineNum":"  912","line":"    /// ]);"},
{"lineNum":"  913","line":"    /// let mut dst = [0.0; 2];"},
{"lineNum":"  914","line":"    /// rdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  915","line":"    /// assert_eq!([f32::consts::PI, 1.0], dst);"},
{"lineNum":"  916","line":"    /// ```"},
{"lineNum":"  917","line":"    #[inline]"},
{"lineNum":"  918","line":"    #[deprecated(since=\"1.2.0\", note=\"please use `read_f32_into` instead\")]"},
{"lineNum":"  919","line":"    fn read_f32_into_unchecked<T: ByteOrder>("},
{"lineNum":"  920","line":"        &mut self,"},
{"lineNum":"  921","line":"        dst: &mut [f32],"},
{"lineNum":"  922","line":"    ) -> Result<()> {"},
{"lineNum":"  923","line":"        self.read_f32_into::<T>(dst)"},
{"lineNum":"  924","line":"    }"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"    /// Reads a sequence of IEEE754 double-precision (8 bytes) floating"},
{"lineNum":"  927","line":"    /// point numbers from the underlying reader."},
{"lineNum":"  928","line":"    ///"},
{"lineNum":"  929","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  930","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  931","line":"    ///"},
{"lineNum":"  932","line":"    /// # Errors"},
{"lineNum":"  933","line":"    ///"},
{"lineNum":"  934","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  935","line":"    ///"},
{"lineNum":"  936","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  937","line":"    ///"},
{"lineNum":"  938","line":"    /// # Examples"},
{"lineNum":"  939","line":"    ///"},
{"lineNum":"  940","line":"    /// Read a sequence of big-endian single-precision floating point number"},
{"lineNum":"  941","line":"    /// from a `Read`:"},
{"lineNum":"  942","line":"    ///"},
{"lineNum":"  943","line":"    /// ```rust"},
{"lineNum":"  944","line":"    /// use std::f64;"},
{"lineNum":"  945","line":"    /// use std::io::Cursor;"},
{"lineNum":"  946","line":"    ///"},
{"lineNum":"  947","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"  948","line":"    ///"},
{"lineNum":"  949","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":"  950","line":"    ///     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,"},
{"lineNum":"  951","line":"    ///     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,"},
{"lineNum":"  952","line":"    /// ]);"},
{"lineNum":"  953","line":"    /// let mut dst = [0.0; 2];"},
{"lineNum":"  954","line":"    /// rdr.read_f64_into::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":"  955","line":"    /// assert_eq!([f64::consts::PI, 1.0], dst);"},
{"lineNum":"  956","line":"    /// ```"},
{"lineNum":"  957","line":"    #[inline]"},
{"lineNum":"  958","line":"    fn read_f64_into<T: ByteOrder>("},
{"lineNum":"  959","line":"        &mut self,"},
{"lineNum":"  960","line":"        dst: &mut [f64],"},
{"lineNum":"  961","line":"    ) -> Result<()> {"},
{"lineNum":"  962","line":"        {"},
{"lineNum":"  963","line":"            let buf = unsafe { slice_to_u8_mut(dst) };"},
{"lineNum":"  964","line":"            try!(self.read_exact(buf));"},
{"lineNum":"  965","line":"        }"},
{"lineNum":"  966","line":"        T::from_slice_f64(dst);"},
{"lineNum":"  967","line":"        Ok(())"},
{"lineNum":"  968","line":"    }"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"    /// **DEPRECATED**."},
{"lineNum":"  971","line":"    ///"},
{"lineNum":"  972","line":"    /// This method is deprecated. Use `read_f64_into` instead."},
{"lineNum":"  973","line":"    ///"},
{"lineNum":"  974","line":"    /// Reads a sequence of IEEE754 double-precision (8 bytes) floating"},
{"lineNum":"  975","line":"    /// point numbers from the underlying reader."},
{"lineNum":"  976","line":"    ///"},
{"lineNum":"  977","line":"    /// The given buffer is either filled completely or an error is returned."},
{"lineNum":"  978","line":"    /// If an error is returned, the contents of `dst` are unspecified."},
{"lineNum":"  979","line":"    ///"},
{"lineNum":"  980","line":"    /// # Safety"},
{"lineNum":"  981","line":"    ///"},
{"lineNum":"  982","line":"    /// This method is unsafe because there are no guarantees made about the"},
{"lineNum":"  983","line":"    /// floating point values. In particular, this method does not check for"},
{"lineNum":"  984","line":"    /// signaling NaNs, which may result in undefined behavior."},
{"lineNum":"  985","line":"    ///"},
{"lineNum":"  986","line":"    /// # Errors"},
{"lineNum":"  987","line":"    ///"},
{"lineNum":"  988","line":"    /// This method returns the same errors as [`Read::read_exact`]."},
{"lineNum":"  989","line":"    ///"},
{"lineNum":"  990","line":"    /// [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact"},
{"lineNum":"  991","line":"    ///"},
{"lineNum":"  992","line":"    /// # Examples"},
{"lineNum":"  993","line":"    ///"},
{"lineNum":"  994","line":"    /// Read a sequence of big-endian single-precision floating point number"},
{"lineNum":"  995","line":"    /// from a `Read`:"},
{"lineNum":"  996","line":"    ///"},
{"lineNum":"  997","line":"    /// ```rust"},
{"lineNum":"  998","line":"    /// use std::f64;"},
{"lineNum":"  999","line":"    /// use std::io::Cursor;"},
{"lineNum":" 1000","line":"    ///"},
{"lineNum":" 1001","line":"    /// use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":" 1002","line":"    ///"},
{"lineNum":" 1003","line":"    /// let mut rdr = Cursor::new(vec!["},
{"lineNum":" 1004","line":"    ///     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,"},
{"lineNum":" 1005","line":"    ///     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 1006","line":"    /// ]);"},
{"lineNum":" 1007","line":"    /// let mut dst = [0.0; 2];"},
{"lineNum":" 1008","line":"    /// rdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();"},
{"lineNum":" 1009","line":"    /// assert_eq!([f64::consts::PI, 1.0], dst);"},
{"lineNum":" 1010","line":"    /// ```"},
{"lineNum":" 1011","line":"    #[inline]"},
{"lineNum":" 1012","line":"    #[deprecated(since=\"1.2.0\", note=\"please use `read_f64_into` instead\")]"},
{"lineNum":" 1013","line":"    fn read_f64_into_unchecked<T: ByteOrder>("},
{"lineNum":" 1014","line":"        &mut self,"},
{"lineNum":" 1015","line":"        dst: &mut [f64],"},
{"lineNum":" 1016","line":"    ) -> Result<()> {"},
{"lineNum":" 1017","line":"        self.read_f64_into::<T>(dst)"},
{"lineNum":" 1018","line":"    }"},
{"lineNum":" 1019","line":"}"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"/// All types that implement `Read` get methods defined in `ReadBytesExt`"},
{"lineNum":" 1022","line":"/// for free."},
{"lineNum":" 1023","line":"impl<R: io::Read + ?Sized> ReadBytesExt for R {}"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"/// Extends [`Write`] with methods for writing numbers. (For `std::io`.)"},
{"lineNum":" 1026","line":"///"},
{"lineNum":" 1027","line":"/// Most of the methods defined here have an unconstrained type parameter that"},
{"lineNum":" 1028","line":"/// must be explicitly instantiated. Typically, it is instantiated with either"},
{"lineNum":" 1029","line":"/// the [`BigEndian`] or [`LittleEndian`] types defined in this crate."},
{"lineNum":" 1030","line":"///"},
{"lineNum":" 1031","line":"/// # Examples"},
{"lineNum":" 1032","line":"///"},
{"lineNum":" 1033","line":"/// Write unsigned 16 bit big-endian integers to a [`Write`]:"},
{"lineNum":" 1034","line":"///"},
{"lineNum":" 1035","line":"/// ```rust"},
{"lineNum":" 1036","line":"/// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1037","line":"///"},
{"lineNum":" 1038","line":"/// let mut wtr = vec![];"},
{"lineNum":" 1039","line":"/// wtr.write_u16::<BigEndian>(517).unwrap();"},
{"lineNum":" 1040","line":"/// wtr.write_u16::<BigEndian>(768).unwrap();"},
{"lineNum":" 1041","line":"/// assert_eq!(wtr, vec![2, 5, 3, 0]);"},
{"lineNum":" 1042","line":"/// ```"},
{"lineNum":" 1043","line":"///"},
{"lineNum":" 1044","line":"/// [`BigEndian`]: enum.BigEndian.html"},
{"lineNum":" 1045","line":"/// [`LittleEndian`]: enum.LittleEndian.html"},
{"lineNum":" 1046","line":"/// [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html"},
{"lineNum":" 1047","line":"pub trait WriteBytesExt: io::Write {"},
{"lineNum":" 1048","line":"    /// Writes an unsigned 8 bit integer to the underlying writer."},
{"lineNum":" 1049","line":"    ///"},
{"lineNum":" 1050","line":"    /// Note that since this writes a single byte, no byte order conversions"},
{"lineNum":" 1051","line":"    /// are used. It is included for completeness."},
{"lineNum":" 1052","line":"    ///"},
{"lineNum":" 1053","line":"    /// # Errors"},
{"lineNum":" 1054","line":"    ///"},
{"lineNum":" 1055","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1056","line":"    ///"},
{"lineNum":" 1057","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1058","line":"    ///"},
{"lineNum":" 1059","line":"    /// # Examples"},
{"lineNum":" 1060","line":"    ///"},
{"lineNum":" 1061","line":"    /// Write unsigned 8 bit integers to a `Write`:"},
{"lineNum":" 1062","line":"    ///"},
{"lineNum":" 1063","line":"    /// ```rust"},
{"lineNum":" 1064","line":"    /// use byteorder::WriteBytesExt;"},
{"lineNum":" 1065","line":"    ///"},
{"lineNum":" 1066","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1067","line":"    /// wtr.write_u8(2).unwrap();"},
{"lineNum":" 1068","line":"    /// wtr.write_u8(5).unwrap();"},
{"lineNum":" 1069","line":"    /// assert_eq!(wtr, b\"\\x02\\x05\");"},
{"lineNum":" 1070","line":"    /// ```"},
{"lineNum":" 1071","line":"    #[inline]"},
{"lineNum":" 1072","line":"    fn write_u8(&mut self, n: u8) -> Result<()> {"},
{"lineNum":" 1073","line":"        self.write_all(&[n])"},
{"lineNum":" 1074","line":"    }"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"    /// Writes a signed 8 bit integer to the underlying writer."},
{"lineNum":" 1077","line":"    ///"},
{"lineNum":" 1078","line":"    /// Note that since this writes a single byte, no byte order conversions"},
{"lineNum":" 1079","line":"    /// are used. It is included for completeness."},
{"lineNum":" 1080","line":"    ///"},
{"lineNum":" 1081","line":"    /// # Errors"},
{"lineNum":" 1082","line":"    ///"},
{"lineNum":" 1083","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1084","line":"    ///"},
{"lineNum":" 1085","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1086","line":"    ///"},
{"lineNum":" 1087","line":"    /// # Examples"},
{"lineNum":" 1088","line":"    ///"},
{"lineNum":" 1089","line":"    /// Write signed 8 bit integers to a `Write`:"},
{"lineNum":" 1090","line":"    ///"},
{"lineNum":" 1091","line":"    /// ```rust"},
{"lineNum":" 1092","line":"    /// use byteorder::WriteBytesExt;"},
{"lineNum":" 1093","line":"    ///"},
{"lineNum":" 1094","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1095","line":"    /// wtr.write_i8(2).unwrap();"},
{"lineNum":" 1096","line":"    /// wtr.write_i8(-5).unwrap();"},
{"lineNum":" 1097","line":"    /// assert_eq!(wtr, b\"\\x02\\xfb\");"},
{"lineNum":" 1098","line":"    /// ```"},
{"lineNum":" 1099","line":"    #[inline]"},
{"lineNum":" 1100","line":"    fn write_i8(&mut self, n: i8) -> Result<()> {"},
{"lineNum":" 1101","line":"        self.write_all(&[n as u8])"},
{"lineNum":" 1102","line":"    }"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"    /// Writes an unsigned 16 bit integer to the underlying writer."},
{"lineNum":" 1105","line":"    ///"},
{"lineNum":" 1106","line":"    /// # Errors"},
{"lineNum":" 1107","line":"    ///"},
{"lineNum":" 1108","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1109","line":"    ///"},
{"lineNum":" 1110","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1111","line":"    ///"},
{"lineNum":" 1112","line":"    /// # Examples"},
{"lineNum":" 1113","line":"    ///"},
{"lineNum":" 1114","line":"    /// Write unsigned 16 bit big-endian integers to a `Write`:"},
{"lineNum":" 1115","line":"    ///"},
{"lineNum":" 1116","line":"    /// ```rust"},
{"lineNum":" 1117","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1118","line":"    ///"},
{"lineNum":" 1119","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1120","line":"    /// wtr.write_u16::<BigEndian>(517).unwrap();"},
{"lineNum":" 1121","line":"    /// wtr.write_u16::<BigEndian>(768).unwrap();"},
{"lineNum":" 1122","line":"    /// assert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");"},
{"lineNum":" 1123","line":"    /// ```"},
{"lineNum":" 1124","line":"    #[inline]"},
{"lineNum":" 1125","line":"    fn write_u16<T: ByteOrder>(&mut self, n: u16) -> Result<()> {"},
{"lineNum":" 1126","line":"        let mut buf = [0; 2];"},
{"lineNum":" 1127","line":"        T::write_u16(&mut buf, n);"},
{"lineNum":" 1128","line":"        self.write_all(&buf)"},
{"lineNum":" 1129","line":"    }"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"    /// Writes a signed 16 bit integer to the underlying writer."},
{"lineNum":" 1132","line":"    ///"},
{"lineNum":" 1133","line":"    /// # Errors"},
{"lineNum":" 1134","line":"    ///"},
{"lineNum":" 1135","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1136","line":"    ///"},
{"lineNum":" 1137","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1138","line":"    ///"},
{"lineNum":" 1139","line":"    /// # Examples"},
{"lineNum":" 1140","line":"    ///"},
{"lineNum":" 1141","line":"    /// Write signed 16 bit big-endian integers to a `Write`:"},
{"lineNum":" 1142","line":"    ///"},
{"lineNum":" 1143","line":"    /// ```rust"},
{"lineNum":" 1144","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1145","line":"    ///"},
{"lineNum":" 1146","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1147","line":"    /// wtr.write_i16::<BigEndian>(193).unwrap();"},
{"lineNum":" 1148","line":"    /// wtr.write_i16::<BigEndian>(-132).unwrap();"},
{"lineNum":" 1149","line":"    /// assert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");"},
{"lineNum":" 1150","line":"    /// ```"},
{"lineNum":" 1151","line":"    #[inline]"},
{"lineNum":" 1152","line":"    fn write_i16<T: ByteOrder>(&mut self, n: i16) -> Result<()> {"},
{"lineNum":" 1153","line":"        let mut buf = [0; 2];"},
{"lineNum":" 1154","line":"        T::write_i16(&mut buf, n);"},
{"lineNum":" 1155","line":"        self.write_all(&buf)"},
{"lineNum":" 1156","line":"    }"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"    /// Writes an unsigned 24 bit integer to the underlying writer."},
{"lineNum":" 1159","line":"    ///"},
{"lineNum":" 1160","line":"    /// # Errors"},
{"lineNum":" 1161","line":"    ///"},
{"lineNum":" 1162","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1163","line":"    ///"},
{"lineNum":" 1164","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1165","line":"    ///"},
{"lineNum":" 1166","line":"    /// # Examples"},
{"lineNum":" 1167","line":"    ///"},
{"lineNum":" 1168","line":"    /// Write unsigned 24 bit big-endian integers to a `Write`:"},
{"lineNum":" 1169","line":"    ///"},
{"lineNum":" 1170","line":"    /// ```rust"},
{"lineNum":" 1171","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1172","line":"    ///"},
{"lineNum":" 1173","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1174","line":"    /// wtr.write_u24::<BigEndian>(267).unwrap();"},
{"lineNum":" 1175","line":"    /// wtr.write_u24::<BigEndian>(120111).unwrap();"},
{"lineNum":" 1176","line":"    /// assert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");"},
{"lineNum":" 1177","line":"    /// ```"},
{"lineNum":" 1178","line":"    #[inline]"},
{"lineNum":" 1179","line":"    fn write_u24<T: ByteOrder>(&mut self, n: u32) -> Result<()> {"},
{"lineNum":" 1180","line":"        let mut buf = [0; 3];"},
{"lineNum":" 1181","line":"        T::write_u24(&mut buf, n);"},
{"lineNum":" 1182","line":"        self.write_all(&buf)"},
{"lineNum":" 1183","line":"    }"},
{"lineNum":" 1184","line":""},
{"lineNum":" 1185","line":"    /// Writes a signed 24 bit integer to the underlying writer."},
{"lineNum":" 1186","line":"    ///"},
{"lineNum":" 1187","line":"    /// # Errors"},
{"lineNum":" 1188","line":"    ///"},
{"lineNum":" 1189","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1190","line":"    ///"},
{"lineNum":" 1191","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1192","line":"    ///"},
{"lineNum":" 1193","line":"    /// # Examples"},
{"lineNum":" 1194","line":"    ///"},
{"lineNum":" 1195","line":"    /// Write signed 24 bit big-endian integers to a `Write`:"},
{"lineNum":" 1196","line":"    ///"},
{"lineNum":" 1197","line":"    /// ```rust"},
{"lineNum":" 1198","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1199","line":"    ///"},
{"lineNum":" 1200","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1201","line":"    /// wtr.write_i24::<BigEndian>(-34253).unwrap();"},
{"lineNum":" 1202","line":"    /// wtr.write_i24::<BigEndian>(120111).unwrap();"},
{"lineNum":" 1203","line":"    /// assert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");"},
{"lineNum":" 1204","line":"    /// ```"},
{"lineNum":" 1205","line":"    #[inline]"},
{"lineNum":" 1206","line":"    fn write_i24<T: ByteOrder>(&mut self, n: i32) -> Result<()> {"},
{"lineNum":" 1207","line":"        let mut buf = [0; 3];"},
{"lineNum":" 1208","line":"        T::write_i24(&mut buf, n);"},
{"lineNum":" 1209","line":"        self.write_all(&buf)"},
{"lineNum":" 1210","line":"    }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    /// Writes an unsigned 32 bit integer to the underlying writer."},
{"lineNum":" 1213","line":"    ///"},
{"lineNum":" 1214","line":"    /// # Errors"},
{"lineNum":" 1215","line":"    ///"},
{"lineNum":" 1216","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1217","line":"    ///"},
{"lineNum":" 1218","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1219","line":"    ///"},
{"lineNum":" 1220","line":"    /// # Examples"},
{"lineNum":" 1221","line":"    ///"},
{"lineNum":" 1222","line":"    /// Write unsigned 32 bit big-endian integers to a `Write`:"},
{"lineNum":" 1223","line":"    ///"},
{"lineNum":" 1224","line":"    /// ```rust"},
{"lineNum":" 1225","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1226","line":"    ///"},
{"lineNum":" 1227","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1228","line":"    /// wtr.write_u32::<BigEndian>(267).unwrap();"},
{"lineNum":" 1229","line":"    /// wtr.write_u32::<BigEndian>(1205419366).unwrap();"},
{"lineNum":" 1230","line":"    /// assert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");"},
{"lineNum":" 1231","line":"    /// ```"},
{"lineNum":" 1232","line":"    #[inline]"},
{"lineNum":" 1233","line":"    fn write_u32<T: ByteOrder>(&mut self, n: u32) -> Result<()> {"},
{"lineNum":" 1234","line":"        let mut buf = [0; 4];"},
{"lineNum":" 1235","line":"        T::write_u32(&mut buf, n);"},
{"lineNum":" 1236","line":"        self.write_all(&buf)"},
{"lineNum":" 1237","line":"    }"},
{"lineNum":" 1238","line":""},
{"lineNum":" 1239","line":"    /// Writes a signed 32 bit integer to the underlying writer."},
{"lineNum":" 1240","line":"    ///"},
{"lineNum":" 1241","line":"    /// # Errors"},
{"lineNum":" 1242","line":"    ///"},
{"lineNum":" 1243","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1244","line":"    ///"},
{"lineNum":" 1245","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1246","line":"    ///"},
{"lineNum":" 1247","line":"    /// # Examples"},
{"lineNum":" 1248","line":"    ///"},
{"lineNum":" 1249","line":"    /// Write signed 32 bit big-endian integers to a `Write`:"},
{"lineNum":" 1250","line":"    ///"},
{"lineNum":" 1251","line":"    /// ```rust"},
{"lineNum":" 1252","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1253","line":"    ///"},
{"lineNum":" 1254","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1255","line":"    /// wtr.write_i32::<BigEndian>(-34253).unwrap();"},
{"lineNum":" 1256","line":"    /// wtr.write_i32::<BigEndian>(1205419366).unwrap();"},
{"lineNum":" 1257","line":"    /// assert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");"},
{"lineNum":" 1258","line":"    /// ```"},
{"lineNum":" 1259","line":"    #[inline]"},
{"lineNum":" 1260","line":"    fn write_i32<T: ByteOrder>(&mut self, n: i32) -> Result<()> {"},
{"lineNum":" 1261","line":"        let mut buf = [0; 4];"},
{"lineNum":" 1262","line":"        T::write_i32(&mut buf, n);"},
{"lineNum":" 1263","line":"        self.write_all(&buf)"},
{"lineNum":" 1264","line":"    }"},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"    /// Writes an unsigned 48 bit integer to the underlying writer."},
{"lineNum":" 1267","line":"    ///"},
{"lineNum":" 1268","line":"    /// # Errors"},
{"lineNum":" 1269","line":"    ///"},
{"lineNum":" 1270","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1271","line":"    ///"},
{"lineNum":" 1272","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1273","line":"    ///"},
{"lineNum":" 1274","line":"    /// # Examples"},
{"lineNum":" 1275","line":"    ///"},
{"lineNum":" 1276","line":"    /// Write unsigned 48 bit big-endian integers to a `Write`:"},
{"lineNum":" 1277","line":"    ///"},
{"lineNum":" 1278","line":"    /// ```rust"},
{"lineNum":" 1279","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1280","line":"    ///"},
{"lineNum":" 1281","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1282","line":"    /// wtr.write_u48::<BigEndian>(52360336390828).unwrap();"},
{"lineNum":" 1283","line":"    /// wtr.write_u48::<BigEndian>(541).unwrap();"},
{"lineNum":" 1284","line":"    /// assert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");"},
{"lineNum":" 1285","line":"    /// ```"},
{"lineNum":" 1286","line":"    #[inline]"},
{"lineNum":" 1287","line":"    fn write_u48<T: ByteOrder>(&mut self, n: u64) -> Result<()> {"},
{"lineNum":" 1288","line":"        let mut buf = [0; 6];"},
{"lineNum":" 1289","line":"        T::write_u48(&mut buf, n);"},
{"lineNum":" 1290","line":"        self.write_all(&buf)"},
{"lineNum":" 1291","line":"    }"},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"    /// Writes a signed 48 bit integer to the underlying writer."},
{"lineNum":" 1294","line":"    ///"},
{"lineNum":" 1295","line":"    /// # Errors"},
{"lineNum":" 1296","line":"    ///"},
{"lineNum":" 1297","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1298","line":"    ///"},
{"lineNum":" 1299","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1300","line":"    ///"},
{"lineNum":" 1301","line":"    /// # Examples"},
{"lineNum":" 1302","line":"    ///"},
{"lineNum":" 1303","line":"    /// Write signed 48 bit big-endian integers to a `Write`:"},
{"lineNum":" 1304","line":"    ///"},
{"lineNum":" 1305","line":"    /// ```rust"},
{"lineNum":" 1306","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1307","line":"    ///"},
{"lineNum":" 1308","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1309","line":"    /// wtr.write_i48::<BigEndian>(-108363435763825).unwrap();"},
{"lineNum":" 1310","line":"    /// wtr.write_i48::<BigEndian>(77).unwrap();"},
{"lineNum":" 1311","line":"    /// assert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");"},
{"lineNum":" 1312","line":"    /// ```"},
{"lineNum":" 1313","line":"    #[inline]"},
{"lineNum":" 1314","line":"    fn write_i48<T: ByteOrder>(&mut self, n: i64) -> Result<()> {"},
{"lineNum":" 1315","line":"        let mut buf = [0; 6];"},
{"lineNum":" 1316","line":"        T::write_i48(&mut buf, n);"},
{"lineNum":" 1317","line":"        self.write_all(&buf)"},
{"lineNum":" 1318","line":"    }"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"    /// Writes an unsigned 64 bit integer to the underlying writer."},
{"lineNum":" 1321","line":"    ///"},
{"lineNum":" 1322","line":"    /// # Errors"},
{"lineNum":" 1323","line":"    ///"},
{"lineNum":" 1324","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1325","line":"    ///"},
{"lineNum":" 1326","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1327","line":"    ///"},
{"lineNum":" 1328","line":"    /// # Examples"},
{"lineNum":" 1329","line":"    ///"},
{"lineNum":" 1330","line":"    /// Write unsigned 64 bit big-endian integers to a `Write`:"},
{"lineNum":" 1331","line":"    ///"},
{"lineNum":" 1332","line":"    /// ```rust"},
{"lineNum":" 1333","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1334","line":"    ///"},
{"lineNum":" 1335","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1336","line":"    /// wtr.write_u64::<BigEndian>(918733457491587).unwrap();"},
{"lineNum":" 1337","line":"    /// wtr.write_u64::<BigEndian>(143).unwrap();"},
{"lineNum":" 1338","line":"    /// assert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");"},
{"lineNum":" 1339","line":"    /// ```"},
{"lineNum":" 1340","line":"    #[inline]"},
{"lineNum":" 1341","line":"    fn write_u64<T: ByteOrder>(&mut self, n: u64) -> Result<()> {","class":"lineCov","hits":"1","order":"2518","possible_hits":"1",},
{"lineNum":" 1342","line":"        let mut buf = [0; 8];","class":"lineCov","hits":"1","order":"2519","possible_hits":"1",},
{"lineNum":" 1343","line":"        T::write_u64(&mut buf, n);","class":"lineCov","hits":"1","order":"2520","possible_hits":"1",},
{"lineNum":" 1344","line":"        self.write_all(&buf)","class":"lineCov","hits":"1","order":"2527","possible_hits":"1",},
{"lineNum":" 1345","line":"    }","class":"linePartCov","hits":"1","order":"2528","possible_hits":"2",},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"    /// Writes a signed 64 bit integer to the underlying writer."},
{"lineNum":" 1348","line":"    ///"},
{"lineNum":" 1349","line":"    /// # Errors"},
{"lineNum":" 1350","line":"    ///"},
{"lineNum":" 1351","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1352","line":"    ///"},
{"lineNum":" 1353","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1354","line":"    ///"},
{"lineNum":" 1355","line":"    /// # Examples"},
{"lineNum":" 1356","line":"    ///"},
{"lineNum":" 1357","line":"    /// Write signed 64 bit big-endian integers to a `Write`:"},
{"lineNum":" 1358","line":"    ///"},
{"lineNum":" 1359","line":"    /// ```rust"},
{"lineNum":" 1360","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1361","line":"    ///"},
{"lineNum":" 1362","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1363","line":"    /// wtr.write_i64::<BigEndian>(i64::min_value()).unwrap();"},
{"lineNum":" 1364","line":"    /// wtr.write_i64::<BigEndian>(i64::max_value()).unwrap();"},
{"lineNum":" 1365","line":"    /// assert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");"},
{"lineNum":" 1366","line":"    /// ```"},
{"lineNum":" 1367","line":"    #[inline]"},
{"lineNum":" 1368","line":"    fn write_i64<T: ByteOrder>(&mut self, n: i64) -> Result<()> {"},
{"lineNum":" 1369","line":"        let mut buf = [0; 8];"},
{"lineNum":" 1370","line":"        T::write_i64(&mut buf, n);"},
{"lineNum":" 1371","line":"        self.write_all(&buf)"},
{"lineNum":" 1372","line":"    }"},
{"lineNum":" 1373","line":""},
{"lineNum":" 1374","line":"    /// Writes an unsigned 128 bit integer to the underlying writer."},
{"lineNum":" 1375","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1376","line":"    #[inline]"},
{"lineNum":" 1377","line":"    fn write_u128<T: ByteOrder>(&mut self, n: u128) -> Result<()> {"},
{"lineNum":" 1378","line":"        let mut buf = [0; 16];"},
{"lineNum":" 1379","line":"        T::write_u128(&mut buf, n);"},
{"lineNum":" 1380","line":"        self.write_all(&buf)"},
{"lineNum":" 1381","line":"    }"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"    /// Writes a signed 128 bit integer to the underlying writer."},
{"lineNum":" 1384","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1385","line":"    #[inline]"},
{"lineNum":" 1386","line":"    fn write_i128<T: ByteOrder>(&mut self, n: i128) -> Result<()> {"},
{"lineNum":" 1387","line":"        let mut buf = [0; 16];"},
{"lineNum":" 1388","line":"        T::write_i128(&mut buf, n);"},
{"lineNum":" 1389","line":"        self.write_all(&buf)"},
{"lineNum":" 1390","line":"    }"},
{"lineNum":" 1391","line":""},
{"lineNum":" 1392","line":"    /// Writes an unsigned n-bytes integer to the underlying writer."},
{"lineNum":" 1393","line":"    ///"},
{"lineNum":" 1394","line":"    /// # Errors"},
{"lineNum":" 1395","line":"    ///"},
{"lineNum":" 1396","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1397","line":"    ///"},
{"lineNum":" 1398","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1399","line":"    ///"},
{"lineNum":" 1400","line":"    /// # Panics"},
{"lineNum":" 1401","line":"    ///"},
{"lineNum":" 1402","line":"    /// If the given integer is not representable in the given number of bytes,"},
{"lineNum":" 1403","line":"    /// this method panics. If `nbytes > 8`, this method panics."},
{"lineNum":" 1404","line":"    ///"},
{"lineNum":" 1405","line":"    /// # Examples"},
{"lineNum":" 1406","line":"    ///"},
{"lineNum":" 1407","line":"    /// Write unsigned 40 bit big-endian integers to a `Write`:"},
{"lineNum":" 1408","line":"    ///"},
{"lineNum":" 1409","line":"    /// ```rust"},
{"lineNum":" 1410","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1411","line":"    ///"},
{"lineNum":" 1412","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1413","line":"    /// wtr.write_uint::<BigEndian>(312550384361, 5).unwrap();"},
{"lineNum":" 1414","line":"    /// wtr.write_uint::<BigEndian>(43, 5).unwrap();"},
{"lineNum":" 1415","line":"    /// assert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");"},
{"lineNum":" 1416","line":"    /// ```"},
{"lineNum":" 1417","line":"    #[inline]"},
{"lineNum":" 1418","line":"    fn write_uint<T: ByteOrder>("},
{"lineNum":" 1419","line":"        &mut self,"},
{"lineNum":" 1420","line":"        n: u64,"},
{"lineNum":" 1421","line":"        nbytes: usize,"},
{"lineNum":" 1422","line":"    ) -> Result<()> {"},
{"lineNum":" 1423","line":"        let mut buf = [0; 8];"},
{"lineNum":" 1424","line":"        T::write_uint(&mut buf, n, nbytes);"},
{"lineNum":" 1425","line":"        self.write_all(&buf[0..nbytes])"},
{"lineNum":" 1426","line":"    }"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"    /// Writes a signed n-bytes integer to the underlying writer."},
{"lineNum":" 1429","line":"    ///"},
{"lineNum":" 1430","line":"    /// # Errors"},
{"lineNum":" 1431","line":"    ///"},
{"lineNum":" 1432","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1433","line":"    ///"},
{"lineNum":" 1434","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1435","line":"    ///"},
{"lineNum":" 1436","line":"    /// # Panics"},
{"lineNum":" 1437","line":"    ///"},
{"lineNum":" 1438","line":"    /// If the given integer is not representable in the given number of bytes,"},
{"lineNum":" 1439","line":"    /// this method panics. If `nbytes > 8`, this method panics."},
{"lineNum":" 1440","line":"    ///"},
{"lineNum":" 1441","line":"    /// # Examples"},
{"lineNum":" 1442","line":"    ///"},
{"lineNum":" 1443","line":"    /// Write signed 56 bit big-endian integers to a `Write`:"},
{"lineNum":" 1444","line":"    ///"},
{"lineNum":" 1445","line":"    /// ```rust"},
{"lineNum":" 1446","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1447","line":"    ///"},
{"lineNum":" 1448","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1449","line":"    /// wtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();"},
{"lineNum":" 1450","line":"    /// wtr.write_int::<BigEndian>(43, 7).unwrap();"},
{"lineNum":" 1451","line":"    /// assert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");"},
{"lineNum":" 1452","line":"    /// ```"},
{"lineNum":" 1453","line":"    #[inline]"},
{"lineNum":" 1454","line":"    fn write_int<T: ByteOrder>("},
{"lineNum":" 1455","line":"        &mut self,"},
{"lineNum":" 1456","line":"        n: i64,"},
{"lineNum":" 1457","line":"        nbytes: usize,"},
{"lineNum":" 1458","line":"    ) -> Result<()> {"},
{"lineNum":" 1459","line":"        let mut buf = [0; 8];"},
{"lineNum":" 1460","line":"        T::write_int(&mut buf, n, nbytes);"},
{"lineNum":" 1461","line":"        self.write_all(&buf[0..nbytes])"},
{"lineNum":" 1462","line":"    }"},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"    /// Writes an unsigned n-bytes integer to the underlying writer."},
{"lineNum":" 1465","line":"    ///"},
{"lineNum":" 1466","line":"    /// If the given integer is not representable in the given number of bytes,"},
{"lineNum":" 1467","line":"    /// this method panics. If `nbytes > 16`, this method panics."},
{"lineNum":" 1468","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1469","line":"    #[inline]"},
{"lineNum":" 1470","line":"    fn write_uint128<T: ByteOrder>("},
{"lineNum":" 1471","line":"        &mut self,"},
{"lineNum":" 1472","line":"        n: u128,"},
{"lineNum":" 1473","line":"        nbytes: usize,"},
{"lineNum":" 1474","line":"    ) -> Result<()> {"},
{"lineNum":" 1475","line":"        let mut buf = [0; 16];"},
{"lineNum":" 1476","line":"        T::write_uint128(&mut buf, n, nbytes);"},
{"lineNum":" 1477","line":"        self.write_all(&buf[0..nbytes])"},
{"lineNum":" 1478","line":"    }"},
{"lineNum":" 1479","line":""},
{"lineNum":" 1480","line":"    /// Writes a signed n-bytes integer to the underlying writer."},
{"lineNum":" 1481","line":"    ///"},
{"lineNum":" 1482","line":"    /// If the given integer is not representable in the given number of bytes,"},
{"lineNum":" 1483","line":"    /// this method panics. If `nbytes > 16`, this method panics."},
{"lineNum":" 1484","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1485","line":"    #[inline]"},
{"lineNum":" 1486","line":"    fn write_int128<T: ByteOrder>("},
{"lineNum":" 1487","line":"        &mut self,"},
{"lineNum":" 1488","line":"        n: i128,"},
{"lineNum":" 1489","line":"        nbytes: usize,"},
{"lineNum":" 1490","line":"    ) -> Result<()> {"},
{"lineNum":" 1491","line":"        let mut buf = [0; 16];"},
{"lineNum":" 1492","line":"        T::write_int128(&mut buf, n, nbytes);"},
{"lineNum":" 1493","line":"        self.write_all(&buf[0..nbytes])"},
{"lineNum":" 1494","line":"    }"},
{"lineNum":" 1495","line":""},
{"lineNum":" 1496","line":"    /// Writes a IEEE754 single-precision (4 bytes) floating point number to"},
{"lineNum":" 1497","line":"    /// the underlying writer."},
{"lineNum":" 1498","line":"    ///"},
{"lineNum":" 1499","line":"    /// # Errors"},
{"lineNum":" 1500","line":"    ///"},
{"lineNum":" 1501","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1502","line":"    ///"},
{"lineNum":" 1503","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1504","line":"    ///"},
{"lineNum":" 1505","line":"    /// # Examples"},
{"lineNum":" 1506","line":"    ///"},
{"lineNum":" 1507","line":"    /// Write a big-endian single-precision floating point number to a `Write`:"},
{"lineNum":" 1508","line":"    ///"},
{"lineNum":" 1509","line":"    /// ```rust"},
{"lineNum":" 1510","line":"    /// use std::f32;"},
{"lineNum":" 1511","line":"    ///"},
{"lineNum":" 1512","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1513","line":"    ///"},
{"lineNum":" 1514","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1515","line":"    /// wtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();"},
{"lineNum":" 1516","line":"    /// assert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");"},
{"lineNum":" 1517","line":"    /// ```"},
{"lineNum":" 1518","line":"    #[inline]"},
{"lineNum":" 1519","line":"    fn write_f32<T: ByteOrder>(&mut self, n: f32) -> Result<()> {"},
{"lineNum":" 1520","line":"        let mut buf = [0; 4];"},
{"lineNum":" 1521","line":"        T::write_f32(&mut buf, n);"},
{"lineNum":" 1522","line":"        self.write_all(&buf)"},
{"lineNum":" 1523","line":"    }"},
{"lineNum":" 1524","line":""},
{"lineNum":" 1525","line":"    /// Writes a IEEE754 double-precision (8 bytes) floating point number to"},
{"lineNum":" 1526","line":"    /// the underlying writer."},
{"lineNum":" 1527","line":"    ///"},
{"lineNum":" 1528","line":"    /// # Errors"},
{"lineNum":" 1529","line":"    ///"},
{"lineNum":" 1530","line":"    /// This method returns the same errors as [`Write::write_all`]."},
{"lineNum":" 1531","line":"    ///"},
{"lineNum":" 1532","line":"    /// [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all"},
{"lineNum":" 1533","line":"    ///"},
{"lineNum":" 1534","line":"    /// # Examples"},
{"lineNum":" 1535","line":"    ///"},
{"lineNum":" 1536","line":"    /// Write a big-endian double-precision floating point number to a `Write`:"},
{"lineNum":" 1537","line":"    ///"},
{"lineNum":" 1538","line":"    /// ```rust"},
{"lineNum":" 1539","line":"    /// use std::f64;"},
{"lineNum":" 1540","line":"    ///"},
{"lineNum":" 1541","line":"    /// use byteorder::{BigEndian, WriteBytesExt};"},
{"lineNum":" 1542","line":"    ///"},
{"lineNum":" 1543","line":"    /// let mut wtr = Vec::new();"},
{"lineNum":" 1544","line":"    /// wtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();"},
{"lineNum":" 1545","line":"    /// assert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");"},
{"lineNum":" 1546","line":"    /// ```"},
{"lineNum":" 1547","line":"    #[inline]"},
{"lineNum":" 1548","line":"    fn write_f64<T: ByteOrder>(&mut self, n: f64) -> Result<()> {"},
{"lineNum":" 1549","line":"        let mut buf = [0; 8];"},
{"lineNum":" 1550","line":"        T::write_f64(&mut buf, n);"},
{"lineNum":" 1551","line":"        self.write_all(&buf)"},
{"lineNum":" 1552","line":"    }"},
{"lineNum":" 1553","line":"}"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"/// All types that implement `Write` get methods defined in `WriteBytesExt`"},
{"lineNum":" 1556","line":"/// for free."},
{"lineNum":" 1557","line":"impl<W: io::Write + ?Sized> WriteBytesExt for W {}"},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"/// Convert a slice of T (where T is plain old data) to its mutable binary"},
{"lineNum":" 1560","line":"/// representation."},
{"lineNum":" 1561","line":"///"},
{"lineNum":" 1562","line":"/// This function is wildly unsafe because it permits arbitrary modification of"},
{"lineNum":" 1563","line":"/// the binary representation of any `Copy` type. Use with care."},
{"lineNum":" 1564","line":"unsafe fn slice_to_u8_mut<T: Copy>(slice: &mut [T]) -> &mut [u8] {"},
{"lineNum":" 1565","line":"    use std::mem::size_of;"},
{"lineNum":" 1566","line":""},
{"lineNum":" 1567","line":"    let len = size_of::<T>() * slice.len();"},
{"lineNum":" 1568","line":"    slice::from_raw_parts_mut(slice.as_mut_ptr() as *mut u8, len)"},
{"lineNum":" 1569","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-ab20411a83224715", "date" : "2019-06-01 07:50:29", "instrumented" : 5, "covered" : 5,};
var merged_data = [];
