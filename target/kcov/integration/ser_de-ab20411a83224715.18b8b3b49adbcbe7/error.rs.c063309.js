var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin Hashes Library"},
{"lineNum":"    2","line":"// Written in 2018 by"},
{"lineNum":"    3","line":"//   Andrew Poelstra <apoelstra@wpsoftware.net>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    6","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    7","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    8","line":"// any warranty."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   11","line":"// along with this software."},
{"lineNum":"   12","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"//! # Error Type"},
{"lineNum":"   16","line":"//!"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"use std::{error, fmt};"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"/// Hex decoding error"},
{"lineNum":"   21","line":"#[derive(Copy, Clone, PartialEq, Eq)]"},
{"lineNum":"   22","line":"pub enum Error {"},
{"lineNum":"   23","line":"    /// non-hexadecimal character"},
{"lineNum":"   24","line":"    InvalidChar(char),"},
{"lineNum":"   25","line":"    /// purported hex string had odd length"},
{"lineNum":"   26","line":"    OddLengthString(usize),"},
{"lineNum":"   27","line":"    /// tried to parse fixed-length hash from a string with the wrong type (expected, got)"},
{"lineNum":"   28","line":"    InvalidLength(usize, usize),"},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"impl fmt::Debug for Error {"},
{"lineNum":"   32","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"        match *self {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   34","line":"            Error::InvalidChar(ch) => write!(f, \"invalid hex character {}\", ch),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"            Error::OddLengthString(ell) => write!(f, \"odd hex string length {}\", ell),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"            Error::InvalidLength(ell, ell2) => write!(f, \"bad hex string length {} (expected {})\", ell2, ell),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   39","line":"}"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"impl fmt::Display for Error {"},
{"lineNum":"   42","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   43","line":"        fmt::Debug::fmt(self, f)"},
{"lineNum":"   44","line":"    }"},
{"lineNum":"   45","line":"}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"impl error::Error for Error {"},
{"lineNum":"   48","line":"    fn cause(&self) -> Option<&error::Error> {"},
{"lineNum":"   49","line":"        None"},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    fn description(&self) -> &str {"},
{"lineNum":"   53","line":"        match *self {"},
{"lineNum":"   54","line":"            Error::InvalidChar(_) => \"invalid hex character\","},
{"lineNum":"   55","line":"            Error::OddLengthString(_) => \"odd hex string length\","},
{"lineNum":"   56","line":"            Error::InvalidLength(_, _) => \"bad hex string length\","},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":"}"},
{"lineNum":"   60","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-ab20411a83224715", "date" : "2019-06-01 07:50:29", "instrumented" : 6, "covered" : 0,};
var merged_data = [];
